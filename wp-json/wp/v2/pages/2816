{"id":2816,"date":"2021-11-10T08:46:26","date_gmt":"2021-11-10T08:46:26","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=2816"},"modified":"2023-08-19T01:46:45","modified_gmt":"2023-08-19T01:46:45","slug":"python-type-hints","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-type-hints\/","title":{"rendered":"Python Type Hints"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the Python type hints and how to use the mypy tool to check types statically.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to Python type hints<\/h2>\n\n\n\n<p>Some programming languages have static typing, such as C\/C++. It means you need to declare types of variables, parameters, and return values of a function upfront. The predefined types allow the compilers to check the code before compiling and running the program.<\/p>\n\n\n\n<p>Python uses dynamic typing, in which a function&#8217;s variables, parameters, and return values can be any type. Also, the types of variables can change while the program runs.<\/p>\n\n\n\n<p>Generally, dynamic typing makes it easy to program and causes unexpected errors that you can only discover until the program runs.<\/p>\n\n\n\n<p>Python&#8217;s type hints provide you with optional static typing to leverage the best of both static and dynamic typing.<\/p>\n\n\n\n<p>The following example defines a simple <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-functions\/\">function<\/a> that accepts a string and returns another string:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">say_hi<\/span><span class=\"hljs-params\">(name)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">f'Hi <span class=\"hljs-subst\">{name}<\/span>'<\/span>\n\n\ngreeting = say_hi(<span class=\"hljs-string\">'John'<\/span>)\nprint(greeting)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here&#8217;s the syntax for adding type hints to a parameter and return value of a function:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">parameter: type\n-&gt; type<\/code><\/span><\/pre>\n\n\n<p>For example, the following shows how to use type hints for the <code>name<\/code> parameter and return value of the <code>say_hi()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">say_hi<\/span><span class=\"hljs-params\">(name: str)<\/span> -&gt; str:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">f'Hi <span class=\"hljs-subst\">{name}<\/span>'<\/span>\n\n\ngreeting = say_hi(<span class=\"hljs-string\">'John'<\/span>)\nprint(greeting)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Hi John<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this new syntax, the <code>name<\/code> parameter has the <code>str<\/code> type:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">name: str<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And the return value of the <code>say_hi()<\/code> function also has the type <code>str<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">-&gt; str<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Besides the <code>str<\/code> type, you can use other built-in types such as <code>int<\/code>, <code>float<\/code>, <code>bool<\/code>, and <code>bytes<\/code> for type hintings.<\/p>\n\n\n\n<p>It&#8217;s important to note that the Python interpreter ignores type hints completely. If you pass a number to the <code>say_hi()<\/code> function, the program will run without any warning or error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">say_hi<\/span><span class=\"hljs-params\">(name: str)<\/span> -&gt; str:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">f'Hi <span class=\"hljs-subst\">{name}<\/span>'<\/span>\n\n\ngreeting = say_hi(<span class=\"hljs-number\">123<\/span>)\nprint(greeting)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Hi <span class=\"hljs-number\">123<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To check the syntax for type hints, you need to use a static type checker tool.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Using a static type checker tool: mypy<\/h2>\n\n\n\n<p>Python doesn&#8217;t have an official static type checker tool. At the moment, the most popular third-party tool is Mypy. Since Mypy is a third-party package, you need to install it using the following <code>pip<\/code> command:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">pip instal mypy<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Once installed <code>mypy<\/code>, you can use it to check the type before running the program by using the following command:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mypy app.py<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;ll show the following message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">app.py:<span class=\"hljs-number\">5<\/span>: error: Argument <span class=\"hljs-number\">1<\/span> to <span class=\"hljs-string\">\"say_hi\"<\/span> has incompatible type <span class=\"hljs-string\">\"int\"<\/span>; expected <span class=\"hljs-string\">\"str\"<\/span>\nFound <span class=\"hljs-number\">1<\/span> error <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1<\/span> file (checked <span class=\"hljs-number\">1<\/span> source file)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The error indicates that the argument of the <code>say_hi<\/code> is <code>int<\/code> while the expected type is <code>str<\/code>.<\/p>\n\n\n\n<p>If you change back the argument to a string and run the <code>mypy<\/code> again, it&#8217;ll show a success message:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Success: no issues found <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1<\/span> source file<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Type hinting &amp; type inference<\/h2>\n\n\n\n<p>When defining a variable, you can add a type hint like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">name: str = <span class=\"hljs-string\">'John'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The type of  <code>name<\/code> variable is <code>str<\/code>. If you assign a value that is not a string to the <code>name<\/code> variable, the static type checker will issue an error. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">name: str = <span class=\"hljs-string\">'Hello'<\/span>\nname = <span class=\"hljs-number\">100<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">app.py:<span class=\"hljs-number\">2<\/span>: error: Incompatible types <span class=\"hljs-keyword\">in<\/span> assignment (expression has type <span class=\"hljs-string\">\"int\"<\/span>, variable has type <span class=\"hljs-string\">\"str\"<\/span>)\nFound <span class=\"hljs-number\">1<\/span> error <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1<\/span> file (checked <span class=\"hljs-number\">1<\/span> source file)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Adding a type to a variable is unnecessary because static type checkers typically can infer the type based on the value assigned to the variable.<\/p>\n\n\n\n<p>In this example, the value of the name is a literal string so that the static type checker will infer the type of the name variable as str. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">name = <span class=\"hljs-string\">'Hello'<\/span>\nname = <span class=\"hljs-number\">100<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;ll issue the same error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">app.py:<span class=\"hljs-number\">2<\/span>: error: Incompatible types <span class=\"hljs-keyword\">in<\/span> assignment (expression has type <span class=\"hljs-string\">\"int\"<\/span>, variable has type <span class=\"hljs-string\">\"str\"<\/span>)\nFound <span class=\"hljs-number\">1<\/span> error <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1<\/span> file (checked <span class=\"hljs-number\">1<\/span> source file)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Adding type hints for multiple types<\/h2>\n\n\n\n<p>The following <code>add()<\/code> function returns the sum of two numbers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(x, y)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> x + y<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The numbers can be integers or floats. You can use the module to set type hints for multiple types.<\/p>\n\n\n\n<p>First, import <code>Union<\/code> from <code>typing<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> Union<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, use the <code>Union<\/code> to create a union type that includes <code>int<\/code> and <code>float<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(x: Union&#91;int, float], y: Union&#91;int, float])<\/span> -&gt; Union&#91;int, float]:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> x + y<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Here is the complete source code:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-20\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> Union\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(x: Union&#91;int, float], y: Union&#91;int, float])<\/span> -&gt; Union&#91;int, float]:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> x + y<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-20\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Starting from Python 3.10, you can use the X | Y  syntax to create a union type, for example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-21\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(x: int | float, y: int | float)<\/span> -&gt; int | float:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> x + y<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-21\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Type aliases<\/h2>\n\n\n\n<p>Python allows you to assign an alias to a type and use the alias for type hintings. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-22\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> Union\n\nnumber = Union&#91;int, float]\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(x: number, y: number)<\/span> -&gt; number:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> x + y<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-22\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we assign the <code>Union[int, float]<\/code> type an alias <code>Number<\/code> and use the <code>Number<\/code> alias in the add() function.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Adding type hints for lists, dictionaries, and sets<\/h2>\n\n\n\n<p>You can use the following built-in types to set the type hints for a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list\/\">list<\/a>, <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-dictionary\/\">dictionary<\/a>, and <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-set\/\">set<\/a>:<\/p>\n\n\n\n<ul>\n<li>list<\/li>\n\n\n\n<li>dict<\/li>\n\n\n\n<li>set<\/li>\n<\/ul>\n\n\n\n<p>If you type hints in a variable as a list but later assign a dictionary to it, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-23\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">ratings: list = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\nratings = {<span class=\"hljs-number\">1<\/span>: <span class=\"hljs-string\">'Bad'<\/span>, <span class=\"hljs-number\">2<\/span>: <span class=\"hljs-string\">'average'<\/span>, <span class=\"hljs-number\">3<\/span>: <span class=\"hljs-string\">'Good'<\/span>}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-23\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-24\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">app.py:<span class=\"hljs-number\">3<\/span>: error: Incompatible types <span class=\"hljs-keyword\">in<\/span> assignment (expression has type <span class=\"hljs-string\">\"Dict&#91;int, str]\"<\/span>, variable has type <span class=\"hljs-string\">\"List&#91;Any]\"<\/span>)\nFound <span class=\"hljs-number\">1<\/span> error <span class=\"hljs-keyword\">in<\/span> <span class=\"hljs-number\">1<\/span> file (checked <span class=\"hljs-number\">1<\/span> source file)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-24\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To specify the types of values in the list, dictionary, and sets, you can use type aliases from the typing module:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Type Alias<\/th><th>Built-in Type<\/th><\/tr><\/thead><tbody><tr><td>List<\/td><td>list<\/td><\/tr><tr><td>Tuple<\/td><td>tuple<\/td><\/tr><tr><td>Dict<\/td><td>dict<\/td><\/tr><tr><td>Set<\/td><td>set<\/td><\/tr><tr><td>Frozenset<\/td><td>frozenset<\/td><\/tr><tr><td>Sequence<\/td><td>For list, tuple, and any other sequence data type. <\/td><\/tr><tr><td>Mapping<\/td><td>For dictionary (dict), set, frozenset, and any other mapping data type <\/td><\/tr><tr><td>ByteString  <\/td><td> bytes, bytearray, and memoryview types. <\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>For example, the following defines a list of integers:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-25\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> typing <span class=\"hljs-keyword\">import<\/span> List\n\nratings: List&#91;int] = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-25\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">None type<\/h2>\n\n\n\n<p>If a function doesn&#8217;t explicitly return a value, you can use None to type hint the return value. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-26\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">log<\/span><span class=\"hljs-params\">(message: str)<\/span> -&gt; <span class=\"hljs-keyword\">None<\/span>:<\/span>\n    print(message)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-26\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>Use type hints and static type checker tools to make your code more robust.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2816\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-type-hints\/\"\n\t\t\t\tdata-post-title=\"Python Type Hints\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2816\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-type-hints\/\"\n\t\t\t\tdata-post-title=\"Python Type Hints\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn about the Python type hints and how to use the mypy tool to check types statically. Introduction to Python type hints Some programming languages have static typing, such as C\/C++. It means you need to declare types of variables, parameters, and return values of a function upfront. The predefined [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":37,"menu_order":54,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2816"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=2816"}],"version-history":[{"count":3,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2816\/revisions"}],"predecessor-version":[{"id":6658,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2816\/revisions\/6658"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/37"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=2816"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}