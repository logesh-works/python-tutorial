{"id":431,"date":"2020-10-10T10:14:38","date_gmt":"2020-10-10T10:14:38","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=431"},"modified":"2021-10-17T06:57:47","modified_gmt":"2021-10-17T06:57:47","slug":"python-private-attributes","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-private-attributes\/","title":{"rendered":"Python Private Attributes"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about encapsulation and how to use private attributes to accomplish encapsulation in Python.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to encapsulation in Python<\/h2>\n\n\n\n<p>Encapsulation is one of the four fundamental concepts in object-oriented programming including abstraction, encapsulation, inheritance, and polymorphism.<\/p>\n\n\n\n<p>Encapsulation is the packing of data and <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-functions\/\">functions<\/a> that work on that data within a single object. By doing so, you can hide the internal state of the object from the outside. This is known as <strong>information hiding<\/strong>.<\/p>\n\n\n\n<p>A <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-class\/\">class<\/a> is an example of encapsulation. A class bundles data and methods into a single unit. And a class provides the access to its attributes via methods.<\/p>\n\n\n\n<p>The idea of information hiding is that if you have an attribute that isn&#8217;t visible to the outside, you can control the access to its value to make sure your object is always has a valid state.<\/p>\n\n\n\n<p>Let&#8217;s take a look at an example to better understand the encapsulation concept.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Python encapsulation example<\/h2>\n\n\n\n<p>The following defines the <code>Counter<\/code> class:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Counter<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        self.current = <span class=\"hljs-number\">0<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">increment<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        self.current += <span class=\"hljs-number\">1<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">value<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">return<\/span> self.current\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">reset<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        self.current = <span class=\"hljs-number\">0<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>Counter<\/code> class has one attribute called <code>current<\/code> which defaults to zero. And it has three methods: <\/p>\n\n\n\n<ul><li><code>increment()<\/code> increases the value of the <code>current<\/code> attribute by one.<\/li><li><code>value()<\/code> returns the current value of the <code>current<\/code> attribute<\/li><li><code>reset()<\/code> sets the value of the <code>current<\/code> attribute to zero.<\/li><\/ul>\n\n\n\n<p>The following creates a new instance of the <code>Counter<\/code> class and calls the <code>increment()<\/code> method three times before showing the current value of the counter to the screen:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">counter = Counter()\n\n\ncounter.increment()\ncounter.increment()\ncounter.increment()\n\nprint(counter.value())\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-number\">3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It works perfectly fine but has one issue. <\/p>\n\n\n\n<p>From the outside of the <code>Counter<\/code> class, you still can access the current attribute and change it to whatever you want. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">counter = Counter()\n\ncounter.increment()\ncounter.increment()\ncounter.current = <span class=\"hljs-number\">-999<\/span>\n\nprint(counter.value())\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-number\">-999<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we create an instance of the <code>Counter<\/code> class, call the <code>increment()<\/code> method twice and set the value of the current attribute to an invalid value <code>-999<\/code>. <\/p>\n\n\n\n<p>So how do you prevent the <code>current<\/code> attribute from modifying outside of the <code>Counter<\/code> class?<\/p>\n\n\n\n<p>That&#8217;s why private attributes come into play.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Private attributes<\/h2>\n\n\n\n<p>Private attributes can be only accessible from the methods of the class. In other words, they cannot be accessible from outside of the class.<\/p>\n\n\n\n<p>Python doesn&#8217;t have a concept of private attributes. In other words, all attributes are accessible from the outside of a class.<\/p>\n\n\n\n<p>By convention, you can define a private attribute by prefixing a single underscore (_):<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">_attribute<\/code><\/span><\/pre>\n\n\n<p>This means that the _attribute should not be manipulated and may have a breaking change in the future.<\/p>\n\n\n\n<p>The following redefines the <code>Counter<\/code> class with the <code>current<\/code> as a private attribute by convention:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Counter<\/span>:<\/span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        self._current = <span class=\"hljs-number\">0<\/span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">increment<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        self._current += <span class=\"hljs-number\">1<\/span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">value<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        <span class=\"hljs-keyword\">return<\/span> self._current\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">reset<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        self._current = <span class=\"hljs-number\">0<\/span>\r\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Name mangling with double underscores<\/h2>\n\n\n\n<p>If you prefix an attribute name with double underscores (<code>__<\/code>) like this: <\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">__attribute<\/code><\/span><\/pre>\n\n\n<p>Python will automatically change the name of the <code>__attribute<\/code> to:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">_class__attribute<\/code><\/span><\/pre>\n\n\n<p>This is called the name mangling in Python. <\/p>\n\n\n\n<p>By doing this, you cannot access the __attribute directly from the outside of a class like:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">instance<\/span><span class=\"hljs-selector-class\">.__attribute<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you still can access it using the _class__attribute name:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"CSS\" data-shcb-language-slug=\"css\"><span><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">instance<\/span><span class=\"hljs-selector-class\">._class__attribute<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">CSS<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">css<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following example redefines the Counter class with the __current attribute:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">class Counter:\r\n    def __init__(self):\r\n        self.__current = 0\r\n\r\n    def increment(self):\r\n        self.__current += 1\r\n\r\n    def value(self):\r\n        return self.__current\r\n\r\n    def reset(self):\r\n        self.__current = 0\r\n\r\r<\/code><\/span><\/pre>\n\n\n<p>Now, if you attempt to access __current attribute, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">counter = Counter()\r\n<span class=\"hljs-keyword\">print<\/span>(counter.__current)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">AttributeError: <span class=\"hljs-string\">'Counter'<\/span> object has no attribute <span class=\"hljs-string\">'__current'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, you can access the __current attribute as _Counter___current like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">counter = Counter()\r\n<span class=\"hljs-keyword\">print<\/span>(counter._Counter__current)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Encapsulation is the packing of data and methods into a class so that you can hide the information and restrict access from outside.<\/li><li>Prefix an attribute with a single underscore (<code>_<\/code>) to make it private by convention. <\/li><li>Prefix an attribute with double underscores (<code>__<\/code>) to use the name mangling.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"431\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-private-attributes\/\"\n\t\t\t\tdata-post-title=\"Python Private Attributes\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"431\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-private-attributes\/\"\n\t\t\t\tdata-post-title=\"Python Private Attributes\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the encapsulation and how to use private attributes to accomplish encapsulation in Python<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":417,"menu_order":7,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/431"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=431"}],"version-history":[{"count":4,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/431\/revisions"}],"predecessor-version":[{"id":2572,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/431\/revisions\/2572"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/417"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=431"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}