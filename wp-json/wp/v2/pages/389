{"id":389,"date":"2020-10-09T01:57:14","date_gmt":"2020-10-09T01:57:14","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=389"},"modified":"2022-09-15T04:24:49","modified_gmt":"2022-09-15T04:24:49","slug":"python-list-comprehensions","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list-comprehensions\/","title":{"rendered":"Python List Comprehensions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about Python List comprehensions that allow you to create a new list from an existing one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to Python list comprehensions<\/h2>\n\n\n\n<p>In programming, you often need to transform elements of a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list\/\">list<\/a> and return a new list. <\/p>\n\n\n\n<p>For example, suppose that you have a list of five numbers like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you want to get a list of squares based on this <code>numbers<\/code> list<\/p>\n\n\n\n<p>The straightforward way is to use a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-for-loop-list\/\">for loop<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>]\n\nsquares = &#91;]\n<span class=\"hljs-keyword\">for<\/span> number <span class=\"hljs-keyword\">in<\/span> numbers:\n    squares.append(number**<span class=\"hljs-number\">2<\/span>)\n\nprint(squares)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>for<\/code> loop iterates over the elements of the <code>numbers<\/code> list,  squares each number and adds the result to the squares list.<\/p>\n\n\n\n<p class=\"note\">Note that a square number is the product of the number multiplied by itself. For example, square number 2 is 2*2 = 4, square number of 3 is 3*3  = 9, and so on.<\/p>\n\n\n\n<p>To make the code more concise, you can use the built-in <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-map-list\/\">map()<\/a><\/code> function with a lambda expression:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>]\n\nsquares = list(map(<span class=\"hljs-keyword\">lambda<\/span> number: number**<span class=\"hljs-number\">2<\/span>, numbers))\n\nprint(squares)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since the <code>map()<\/code> function returns an <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-iterables\/\">iterator<\/a>, you need to use the <code>list()<\/code> function to convert the iterator to a list.<\/p>\n\n\n\n<p>Both the <code>for<\/code> loop and <code>map()<\/code> function can help you create a new list based on an existing one. But the code isn&#8217;t really concise and beautiful. <\/p>\n\n\n\n<p>To help you create a list based on the transformation of elements of an existing list, Python provides a feature called list comprehensions.<\/p>\n\n\n\n<p>The following shows how to use list comprehension to make a list of squares from the <code>numbers<\/code> list:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">numbers = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-number\">5<\/span>]\nsquares = &#91;number**<span class=\"hljs-number\">2<\/span> <span class=\"hljs-keyword\">for<\/span> number <span class=\"hljs-keyword\">in<\/span> numbers]\n\nprint(squares)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And here&#8217;s the list comprehension part:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">squares = &#91;number**<span class=\"hljs-number\">2<\/span> <span class=\"hljs-keyword\">for<\/span> number <span class=\"hljs-keyword\">in<\/span> numbers]\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>A list comprehension consists of the following parts:<\/p>\n\n\n\n<ul><li>An input list (<code>numbers<\/code>)<\/li><li>A <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-variables\/\">variable<\/a> that represents the elements of the list (<code>number<\/code>)<\/li><li>An output expression (<code>number**2<\/code>) that returns the elements of the output list from the elements of the input list.<\/li><\/ul>\n\n\n\n<p>The following shows the basic syntax of the Python list comprehension:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;output_expression <span class=\"hljs-keyword\">for<\/span> element <span class=\"hljs-keyword\">in<\/span> list]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s equivalent to the following:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">output_list = &#91;]\n<span class=\"hljs-keyword\">for<\/span> element <span class=\"hljs-keyword\">in<\/span> list:\n    output_list.append(output_expression)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Python list comprehension with if condition<\/h2>\n\n\n\n<p>The following shows a list of the top five highest mountains on Earth:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mountains = &#91;\n    &#91;<span class=\"hljs-string\">'Makalu'<\/span>, <span class=\"hljs-number\">8485<\/span>],\n    &#91;<span class=\"hljs-string\">'Lhotse'<\/span>, <span class=\"hljs-number\">8516<\/span>],\n    &#91;<span class=\"hljs-string\">'Kanchendzonga'<\/span>, <span class=\"hljs-number\">8586<\/span>],\n    &#91;<span class=\"hljs-string\">'K2'<\/span>, <span class=\"hljs-number\">8611<\/span>],\n    &#91;<span class=\"hljs-string\">'Everest'<\/span>, <span class=\"hljs-number\">8848<\/span>]\n]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get a list of mountains where the height is greater than 8600 meters, you can use a <code>for<\/code> loop or the <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-filter-list\/\">filter()<\/a><\/code> function with a lambda expression like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mountains = &#91;\n    &#91;<span class=\"hljs-string\">'Makalu'<\/span>, <span class=\"hljs-number\">8485<\/span>],\n    &#91;<span class=\"hljs-string\">'Lhotse'<\/span>, <span class=\"hljs-number\">8516<\/span>],\n    &#91;<span class=\"hljs-string\">'Kanchendzonga'<\/span>, <span class=\"hljs-number\">8586<\/span>],\n    &#91;<span class=\"hljs-string\">'K2'<\/span>, <span class=\"hljs-number\">8611<\/span>],\n    &#91;<span class=\"hljs-string\">'Everest'<\/span>, <span class=\"hljs-number\">8848<\/span>]\n]\n\n\nhighest_mountains = list(filter(<span class=\"hljs-keyword\">lambda<\/span> m: m&#91;<span class=\"hljs-number\">1<\/span>] &gt; <span class=\"hljs-number\">8600<\/span>, mountains))\n\nprint(highest_mountains)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;&#91;<span class=\"hljs-string\">'K2'<\/span>, <span class=\"hljs-number\">8611<\/span>], &#91;<span class=\"hljs-string\">'Everest'<\/span>, <span class=\"hljs-number\">8848<\/span>]]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Like the <code>map()<\/code> function, the <code>filter()<\/code> function returns an iterator. Therefore, you need to use the <code>list()<\/code> function to convert the iterator to a list.<\/p>\n\n\n\n<p>Python List comprehensions provide an optional predicate that allows you to specify a condition for the list elements to be included in the new list:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;output_expression <span class=\"hljs-keyword\">for<\/span> element <span class=\"hljs-keyword\">in<\/span> list <span class=\"hljs-keyword\">if<\/span> condition]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This list comprehension allows you to replace the <code>filter()<\/code> with a lambda expression:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mountains = &#91;\n    &#91;<span class=\"hljs-string\">'Makalu'<\/span>, <span class=\"hljs-number\">8485<\/span>],\n    &#91;<span class=\"hljs-string\">'Lhotse'<\/span>, <span class=\"hljs-number\">8516<\/span>],\n    &#91;<span class=\"hljs-string\">'Kanchendzonga'<\/span>, <span class=\"hljs-number\">8586<\/span>],\n    &#91;<span class=\"hljs-string\">'K2'<\/span>, <span class=\"hljs-number\">8611<\/span>],\n    &#91;<span class=\"hljs-string\">'Everest'<\/span>, <span class=\"hljs-number\">8848<\/span>]\n]\n\nhighest_mountains = &#91;m <span class=\"hljs-keyword\">for<\/span> m <span class=\"hljs-keyword\">in<\/span> mountains <span class=\"hljs-keyword\">if<\/span> m&#91;<span class=\"hljs-number\">1<\/span>] &gt; <span class=\"hljs-number\">8600<\/span>]\n\nprint(highest_mountains)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&#91;&#91;<span class=\"hljs-string\">'K2'<\/span>, <span class=\"hljs-number\">8611<\/span>], &#91;<span class=\"hljs-string\">'Everest'<\/span>, <span class=\"hljs-number\">8848<\/span>]]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Python list comprehensions allow you to create a new list from an existing one.<\/li><li>Use list comprehensions instead of <code>map()<\/code> or <code>filter()<\/code> to make your code more concise and readable.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"389\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list-comprehensions\/\"\n\t\t\t\tdata-post-title=\"Python List Comprehensions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"389\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list-comprehensions\/\"\n\t\t\t\tdata-post-title=\"Python List Comprehensions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about Python List comprehensions that allow you to create a new list from an existing one.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":37,"menu_order":35,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/389"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=389"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/389\/revisions"}],"predecessor-version":[{"id":4850,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/389\/revisions\/4850"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/37"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=389"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}