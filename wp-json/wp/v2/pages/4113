{"id":4113,"date":"2022-07-15T08:32:56","date_gmt":"2022-07-15T08:32:56","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=4113"},"modified":"2023-06-03T07:45:06","modified_gmt":"2023-06-03T07:45:06","slug":"python-async-await","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-async-await\/","title":{"rendered":"Python async\/await"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you will learn about Python coroutines and how to use the Python <code>async<\/code> and <code>await<\/code> keywords to create and pause coroutines.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to Python coroutines<\/h2>\n\n\n\n<p>A coroutine is a regular <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-functions\/\">function<\/a> with the ability to pause its execution when encountering an operation that may take a while to complete.<\/p>\n\n\n\n<p>When the long-running operation completes, you can resume the paused coroutine and execute the remaining code in that coroutine.<\/p>\n\n\n\n<p>While the coroutine is waiting for the long-running operation, you can run other code. By doing this, you can run the program asynchronously to improve its performance.<\/p>\n\n\n\n<p>To create and pause a coroutine, you use the Python <code>async<\/code> and <code>await<\/code> keywords:<\/p>\n\n\n\n<ul>\n<li>The <code>async<\/code> keyword creates a coroutine.<\/li>\n\n\n\n<li>The <code>await<\/code> keyword pauses a coroutine.<\/li>\n<\/ul>\n\n\n\n<h2 class=\"wp-block-heading\">Defining a coroutine with Python async keyword<\/h2>\n\n\n\n<p>The following defines a simple function that returns the square number of an integer:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> number*number<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And you can pass an integer to the <code>square()<\/code> function to get its square number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> number*number\n\n\nresult = square(<span class=\"hljs-number\">10<\/span>)\nprint(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-number\">100<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you add the <code>async<\/code> keyword to the function, the function becomes a coroutine:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> number*number<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>And a calling coroutine returns a coroutine object that will be run later. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> number*number\n\n\nresult = square(<span class=\"hljs-number\">10<\/span>)\nprint(square)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&lt;coroutine object square at <span class=\"hljs-number\">0x00000185C31E7D80<\/span>&gt;\nsys:<span class=\"hljs-number\">1<\/span>: RuntimeWarning: coroutine <span class=\"hljs-string\">'square'<\/span> was never awaited<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we call the <code>square()<\/code> coroutine, assign the returned value to the <code>result<\/code> variable, and print it out.<\/p>\n\n\n\n<p>When you call a coroutine, Python doesn&#8217;t execute the code inside the coroutine immediately. Instead, it returns a coroutine object.<\/p>\n\n\n\n<p>The second line in the output also shows an error message indicating that the coroutine was never awaited. More on this in the following <code>await<\/code> section:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">sys:<span class=\"hljs-number\">1<\/span>: RuntimeWarning: coroutine <span class=\"hljs-string\">'square'<\/span> was never awaited<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To run a coroutine, you need to execute it on an <a href=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-event-loop\/\">event loop<\/a>. Prior to Python 3.7, you have to manually create an event loop to execute coroutines and close the event loop.<\/p>\n\n\n\n<p>However, since version 3.7, the <code>asyncio<\/code> library added some functions that simplify the event loop management. <\/p>\n\n\n\n<p>For example, you can use the <code>asyncio.run()<\/code> function to automatically create an event loop, run a coroutine and close it.<\/p>\n\n\n\n<p>The following uses the <code>asyncio.run()<\/code> function to execute the <code>square()<\/code> coroutine and get the result:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> asyncio\n\n\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> number*number\n\nresult = asyncio.run(square(<span class=\"hljs-number\">10<\/span>))\nprint(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-number\">100<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It&#8217;s important to note that the <code>asyncio.run()<\/code> is designed to be the main entry point of an <code>asyncio<\/code> program. <\/p>\n\n\n\n<p>Also, the <code>asyncio.run()<\/code> function only executes one coroutine which may call other coroutines and functions in the program.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Pausing a coroutine with Python await keyword<\/h2>\n\n\n\n<p>The <code>await<\/code> keyword pauses the execution of a coroutine. The <code>await<\/code> keyword is followed by a call to a coroutine like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">result = <span class=\"hljs-keyword\">await<\/span> my_coroutine()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>await<\/code> keyword causes the <code>my_coroutine()<\/code> to execute, waits for the code to be completed, and returns a result. <\/p>\n\n\n\n<p>It&#8217;s important to note that <code>await<\/code> keyword is only valid inside a coroutine. In other words, you must use the <code>await<\/code> keyword inside a coroutine.<\/p>\n\n\n\n<p>This is the reason why you saw an error message in the above example that uses the <code>await<\/code> keyword outside of a coroutine.<\/p>\n\n\n\n<p>The following example shows how to use the <code>await<\/code> keyword to pause a coroutine:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> asyncio\r\n\r\n\r\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">square<\/span><span class=\"hljs-params\">(number: int)<\/span> -&gt; int:<\/span>\r\n    <span class=\"hljs-keyword\">return<\/span> number*number\r\n\r\n\r\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span> -&gt; <span class=\"hljs-keyword\">None<\/span>:<\/span>\r\n    x = <span class=\"hljs-keyword\">await<\/span> square(<span class=\"hljs-number\">10<\/span>)\r\n    print(<span class=\"hljs-string\">f'x=<span class=\"hljs-subst\">{x}<\/span>'<\/span>)\r\n\r\n    y = <span class=\"hljs-keyword\">await<\/span> square(<span class=\"hljs-number\">5<\/span>)\r\n    print(<span class=\"hljs-string\">f'y=<span class=\"hljs-subst\">{y}<\/span>'<\/span>)\r\n\r\n    print(<span class=\"hljs-string\">f'total=<span class=\"hljs-subst\">{x+y}<\/span>'<\/span>)\r\n\r\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\r\n    asyncio.run(main())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">x=<span class=\"hljs-number\">100<\/span>\ny=<span class=\"hljs-number\">25<\/span>\ntotal=<span class=\"hljs-number\">125<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works. (we&#8217;ll focus on the <code>main()<\/code> function):<\/p>\n\n\n\n<p>First, call the <code><code>square()<\/code><\/code> coroutine using the <code>await<\/code> keyword. The <code>await<\/code> keyword will pause the execution of the <code>main()<\/code> coroutine, wait for the <code><code>square()<\/code><\/code> coroutine to complete, and return the result:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">x = <span class=\"hljs-keyword\">await<\/span> square(<span class=\"hljs-number\">10<\/span>)\nprint(<span class=\"hljs-string\">f'x=<span class=\"hljs-subst\">{x}<\/span>'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call the <code>square()<\/code> coroutine a second time using the <code>await<\/code> keyword:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">y = <span class=\"hljs-keyword\">await<\/span> square(<span class=\"hljs-number\">5<\/span>)\nprint(<span class=\"hljs-string\">f'y=<span class=\"hljs-subst\">{y}<\/span>'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, display the total:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">print(<span class=\"hljs-string\">f'total=<span class=\"hljs-subst\">{x+y}<\/span>'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following statement uses the <code>run()<\/code> function to execute the <code>main()<\/code> coroutine and manage the event loop:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">asyncio.run(main())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>So far, our program executes like a synchronous program. It doesn&#8217;t reveal the power of the asynchronous programming model.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>A coroutine is a regular function with the power of pausing a long-running operation, waiting for the result, and resuming from the paused point.<\/li>\n\n\n\n<li>Use <code>async<\/code> keyword to define a coroutine. <\/li>\n\n\n\n<li>Use <code>await<\/code> keyword to pause a coroutine.<\/li>\n\n\n\n<li>Use <code>asyncio.run()<\/code> function to automatically execute a coroutine on an event loop and manage an event loop.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4113\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-async-await\/\"\n\t\t\t\tdata-post-title=\"Python async\/await\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4113\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-async-await\/\"\n\t\t\t\tdata-post-title=\"Python async\/await\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will learn about Python coroutines and how to use the Python async and await keywords to create and pause coroutines.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4104,"menu_order":15,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4113"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=4113"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4113\/revisions"}],"predecessor-version":[{"id":6553,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4113\/revisions\/6553"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4104"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=4113"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}