{"id":1066,"date":"2020-11-12T07:30:10","date_gmt":"2020-11-12T07:30:10","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=1066"},"modified":"2020-11-12T07:35:55","modified_gmt":"2020-11-12T07:35:55","slug":"python-partial-functions","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-partial-functions\/","title":{"rendered":"Python Partial Functions"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: In this tutorial, you&#8217;ll learn about Python partial functions and how to define partial functions using the partial function from the functools module.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to Python partial functions<\/h2>\n\n\n\n<p>The following example defines a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-functions\/\">function<\/a> that multiplies two arguments:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">multiply<\/span><span class=\"hljs-params\">(a, b)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> a*b<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Sometimes, you just want to multiply an argument with a specified number e.g., 2. To do that, you can reuse the <code>multiply<\/code> function like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">double<\/span><span class=\"hljs-params\">(a)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> multiply(a,<span class=\"hljs-number\">2<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>double<\/code> function returns the <code>multiply<\/code> function. It passed the number 2 to the second argument of the <code>multiply<\/code> function.<\/p>\n\n\n\n<p>The following shows how to use the <code>double<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">result = double(<span class=\"hljs-number\">10<\/span>)\nprint(result)    <\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Put it all together:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">multiply<\/span><span class=\"hljs-params\">(a, b)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> a*b\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">double<\/span><span class=\"hljs-params\">(a)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> multiply(a, <span class=\"hljs-number\">2<\/span>)\n\n\nresult = double(<span class=\"hljs-number\">10<\/span>)\nprint(result)  <span class=\"hljs-comment\"># 20<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As you can see, the <code>double<\/code> function reduces the arguments of the <code>multiply<\/code> function.<\/p>\n\n\n\n<p>The <code>double<\/code> function freezes the second argument of the <code>multiply<\/code> function, which results in a new function with a simpler signature.<\/p>\n\n\n\n<p>In other words, <code>double<\/code> function reduces the complexity of the <code>multiply<\/code> function.<\/p>\n\n\n\n<p>In Python, the <code>double<\/code> function is called a partial function.<\/p>\n\n\n\n<p>In practice, you use partial functions when you want to reduce the number of arguments of a function to simplify the function&#8217;s signature.<\/p>\n\n\n\n<p>Since you&#8217;ll create partial functions sometimes, Python provides you with the <code>partial<\/code> function from the <code>functools<\/code> standard module to help you define partial functions more easily.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Python partial function from functools module<\/h2>\n\n\n\n<p>The following shows the syntax of the <code>partial<\/code> function from the <code>functools<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">functools.partial(fn, \/, *args, **kwargs)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>partial<\/code> function returns new <code>partial<\/code> object, which is a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-built-in-functions\/python-callable\/\">callable<\/a>.<\/p>\n\n\n\n<p>When you call the <code>partial<\/code> object, Python calls the <code>fn<\/code> function with the positional arguments <code>args<\/code> and <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-keyword-arguments\/\">keyword arguments<\/a> <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-kwargs\/\">kwargs<\/a><\/code>.<\/p>\n\n\n\n<p>The following example shows how to use the <code>partial<\/code> function to define the <code>double<\/code> function from the <code>multiply<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> functools <span class=\"hljs-keyword\">import<\/span> partial\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">multiply<\/span><span class=\"hljs-params\">(a, b)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> a*b\n\n\ndouble = partial(multiply, b=<span class=\"hljs-number\">2<\/span>)\n\nresult = double(<span class=\"hljs-number\">10<\/span>)\nprint(result)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">20<\/code><\/span><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<ul><li>First, import the <code>partial<\/code> function from the <code>functools<\/code> module.<\/li><li>Second, define the <code>multiply<\/code> function.<\/li><li>Third, return a partial object from the <code>partial<\/code> function and assign it to the <code>double<\/code> variable.<\/li><\/ul>\n\n\n\n<p>When you call the <code>double<\/code>, Python calls the <code>multiply<\/code> function where <code>b<\/code> argument defaults to <code>2<\/code>.<\/p>\n\n\n\n<p>If you pass more arguments to a partial object, Python appends them to the <code>args<\/code> argument.<\/p>\n\n\n\n<p>When you pass additional keyword arguments to a partial object, Python extends and overrides the <code>kwargs<\/code> arguments.<\/p>\n\n\n\n<p>Therefore, it&#8217;s possible to call the <code>double<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">double(<span class=\"hljs-number\">10<\/span>, b=<span class=\"hljs-number\">3<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, Python will call the <code>multiply<\/code> function where the value of the <code>b<\/code> argument is 3, not 2.<\/p>\n\n\n\n<p>And you&#8217;ll see the following output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">30<\/code><\/span><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Python partial functions and variables<\/h2>\n\n\n\n<p>Sometimes, you may want to use variables for creating partials. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> functools <span class=\"hljs-keyword\">import<\/span> partial\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">multiply<\/span><span class=\"hljs-params\">(a, b)<\/span>:<\/span>\n    <span class=\"hljs-keyword\">return<\/span> a*b\n\n\nx = <span class=\"hljs-number\">2<\/span>\nf = partial(multiply, x)\n\nresult = f(<span class=\"hljs-number\">10<\/span>)  <span class=\"hljs-comment\"># 20<\/span>\nprint(result)\n\nx = <span class=\"hljs-number\">3<\/span>\nresult = f(<span class=\"hljs-number\">10<\/span>)  <span class=\"hljs-comment\"># 20<\/span>\nprint(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, we change <code>x<\/code> to <code>3<\/code> and expect that <code>f(10)<\/code> would return <code>30<\/code> instead of 20.<\/p>\n\n\n\n<p>However, <code>f(10)<\/code> returns <code>20<\/code> instead. It&#8217;s because Python evaluates the value of <code>x<\/code> in the following statement:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">f = partial(multiply, x)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>&#8230;but not after that, therefore, when <code>x<\/code> <a href=\"https:\/\/www.pyprifix.netlify.app\/advanced-python\/python-references\/\">references<\/a> to the new number (<code>3<\/code>), the partial function doesn&#8217;t change.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use <code>partial<\/code> function from the <code>functools<\/code> module to create partial functions in Python.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"1066\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-partial-functions\/\"\n\t\t\t\tdata-post-title=\"Python Partial Functions\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"1066\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-partial-functions\/\"\n\t\t\t\tdata-post-title=\"Python Partial Functions\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: In this tutorial, you&#8217;ll learn about Python partial functions and how to define partial functions using the partial function from the functools module. Introduction to Python partial functions The following example defines a function that multiplies two arguments: Sometimes, you just want to multiply an argument with a specified number e.g., 2. To do [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":37,"menu_order":53,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/1066"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=1066"}],"version-history":[{"count":4,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/1066\/revisions"}],"predecessor-version":[{"id":1070,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/1066\/revisions\/1070"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/37"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=1066"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}