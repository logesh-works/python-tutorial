{"id":4141,"date":"2022-07-18T06:50:58","date_gmt":"2022-07-18T06:50:58","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=4141"},"modified":"2023-06-03T07:58:05","modified_gmt":"2023-06-03T07:58:05","slug":"python-cancel-tasks","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-cancel-tasks\/","title":{"rendered":"Cancelling Tasks"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to cancel a long-running asynchronous operation that may take forever to complete.<\/p>\n\n\n\n<p>The following statement uses the <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-async-await\/\">await<\/a><\/code> statement to wait for a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-asyncio-create_task\/\">task<\/a> to be complete:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">task = asyncio.create_task(coroutine())\n\nresult = <span class=\"hljs-keyword\">await<\/span> task<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>However, if the <code>coroutine()<\/code> took forever, you would be stuck waiting for the <code>await<\/code> statement to finish without obtaining any result. Additionally, you would have no way to stop it if you wanted to.<\/p>\n\n\n\n<p>To resolve this, you can cancel the task using the <code>cancel()<\/code> method of the <code>Task<\/code> object. If you cancel a task, it&#8217;ll raise the <code>CancelledError<\/code> exception when you <code>await<\/code> it. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> asyncio\n<span class=\"hljs-keyword\">from<\/span> asyncio <span class=\"hljs-keyword\">import<\/span> CancelledError\n\n\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">call_api<\/span><span class=\"hljs-params\">(message, result=<span class=\"hljs-number\">1000<\/span>, delay=<span class=\"hljs-number\">3<\/span>)<\/span>:<\/span>\n    print(message)\n    <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(delay)\n    <span class=\"hljs-keyword\">return<\/span> result\n\n\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span>:<\/span>\n    task = asyncio.create_task(\n        call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n    )\n\n    <span class=\"hljs-keyword\">if<\/span> <span class=\"hljs-keyword\">not<\/span> task.done():\n        print(<span class=\"hljs-string\">'Cancelling the task...'<\/span>)\n        task.cancel()\n\n    <span class=\"hljs-keyword\">try<\/span>:\n        <span class=\"hljs-keyword\">await<\/span> task\n    <span class=\"hljs-keyword\">except<\/span> CancelledError:\n        print(<span class=\"hljs-string\">'Task has been cancelled.'<\/span>)\n\n\nasyncio.run(main())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Cancelling the task...\nTask has been cancelled<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, the <code>call_api()<\/code> coroutine prints a message, delays 3 seconds, and returns the result.<\/p>\n\n\n\n<p>Second, create a new task using the <code>create_task()<\/code> function and pass the <code>call_api()<\/code> coroutine. The task will take 5 seconds to complete:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">task = asyncio.create_task(\n    call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, check if the task is not done by calling the <code>done()<\/code> method and cancel the task using the <code>cancel()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> <span class=\"hljs-keyword\">not<\/span> task.done():\n    print(<span class=\"hljs-string\">'Cancelling the task...'<\/span>)\n    task.cancel()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, wait for the task to be completed using the <code>await<\/code> keyword. Since the task has been canceled, the <code>CancelledError<\/code> exception is raised:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">try<\/span>:\n    <span class=\"hljs-keyword\">await<\/span> task\n<span class=\"hljs-keyword\">except<\/span> CancelledError:\n    print(<span class=\"hljs-string\">'Task has been cancelled.'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you want to check every second if a task has been completed and cancel it if an amount of time has passed, you can use a <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-while\/\">while<\/a><\/code> loop:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> asyncio\n<span class=\"hljs-keyword\">from<\/span> asyncio <span class=\"hljs-keyword\">import<\/span> CancelledError\n\n\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">call_api<\/span><span class=\"hljs-params\">(message, result=<span class=\"hljs-number\">1000<\/span>, delay=<span class=\"hljs-number\">3<\/span>)<\/span>:<\/span>\n    print(message)\n    <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(delay)\n    <span class=\"hljs-keyword\">return<\/span> result\n\n\n<span class=\"hljs-keyword\">async<\/span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span>:<\/span>\n    task = asyncio.create_task(\n        call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n    )\n\n    time_elapsed = <span class=\"hljs-number\">0<\/span>\n    <span class=\"hljs-keyword\">while<\/span> <span class=\"hljs-keyword\">not<\/span> task.done():\n        time_elapsed += <span class=\"hljs-number\">1<\/span>\n        <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(<span class=\"hljs-number\">1<\/span>)\n        print(<span class=\"hljs-string\">'Task has not completed, checking again in a second'<\/span>)\n        <span class=\"hljs-keyword\">if<\/span> time_elapsed == <span class=\"hljs-number\">3<\/span>:\n            print(<span class=\"hljs-string\">'Cancelling the task...'<\/span>)\n            task.cancel()\n            <span class=\"hljs-keyword\">break<\/span>\n\n    <span class=\"hljs-keyword\">try<\/span>:\n        <span class=\"hljs-keyword\">await<\/span> task\n    <span class=\"hljs-keyword\">except<\/span> CancelledError:\n        print(<span class=\"hljs-string\">'Task has been cancelled.'<\/span>)\n\n\nasyncio.run(main())<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>while<\/code> loop checks if the task has been completed every second and cancels the task once the elapsed time reaches 3 seconds.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>Use the <code>cancel()<\/code> method of the <code>Task<\/code> object to cancel a task<\/li>\n\n\n\n<li>await a canceled task will raise a <code>CancelledError<\/code> exception.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4141\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-cancel-tasks\/\"\n\t\t\t\tdata-post-title=\"Cancelling Tasks\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4141\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-cancel-tasks\/\"\n\t\t\t\tdata-post-title=\"Cancelling Tasks\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to cancel a task that has not been completed.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4104,"menu_order":17,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4141"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=4141"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4141\/revisions"}],"predecessor-version":[{"id":6557,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4141\/revisions\/6557"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4104"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=4141"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}