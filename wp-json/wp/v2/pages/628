{"id":628,"date":"2020-10-18T04:55:57","date_gmt":"2020-10-18T04:55:57","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=628"},"modified":"2022-09-15T04:19:27","modified_gmt":"2022-09-15T04:19:27","slug":"python-set-comprehension","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-set-comprehension\/","title":{"rendered":"Python Set Comprehension"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use Python set comprehension to create a new set based on an existing one.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to Python Set comprehension<\/h2>\n\n\n\n<p>Suppose that you have the following <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-set\/\">set<\/a> that consists of three tags:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">tags = {<span class=\"hljs-string\">'Django'<\/span>, <span class=\"hljs-string\">'Pandas'<\/span>, <span class=\"hljs-string\">'Numpy'<\/span>}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To convert the tags in the set to another set of tags in lowercase, you may use the following <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-for-range\/\"><code>for<\/code> <\/a>loop:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">tags = {<span class=\"hljs-string\">'Django'<\/span>, <span class=\"hljs-string\">'Pandas'<\/span>, <span class=\"hljs-string\">'Numpy'<\/span>}\n\nlowercase_tags = set()\n<span class=\"hljs-keyword\">for<\/span> tag <span class=\"hljs-keyword\">in<\/span> tags:\n    lowercase_tags.add(tag.lower())\n\nprint(lowercase_tags)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">{<span class=\"hljs-string\">'django'<\/span>, <span class=\"hljs-string\">'numpy'<\/span>, <span class=\"hljs-string\">'pandas'<\/span>}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>First, iterate over each element of the <code>tags<\/code> set.<\/li><li>Second, convert each tag to lowercase and add it the new set (<code>lowercase_tags<\/code>)<\/li><\/ul>\n\n\n\n<p>Or you can use the built-in <code>map()<\/code> function with a lambda expression:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">tags = {<span class=\"hljs-string\">'Django'<\/span>, <span class=\"hljs-string\">'Pandas'<\/span>, <span class=\"hljs-string\">'Numpy'<\/span>}\nlowercase_tags = set(map(<span class=\"hljs-keyword\">lambda<\/span> tag: tag.lower(), tags))\n\nprint(lowercase_tags)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>map()<\/code> function returns a map object so you need to use the <code>set()<\/code> function to convert it to a set.<\/p>\n\n\n\n<p>To make the code more concise, Python provides you with the set comprehension syntax as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">{expression <span class=\"hljs-keyword\">for<\/span> element <span class=\"hljs-keyword\">in<\/span> set <span class=\"hljs-keyword\">if<\/span> condition}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The set comprehension allows you to create a new set based on an existing set.<\/p>\n\n\n\n<p>A set comprehension carries the following steps:<\/p>\n\n\n\n<ul><li>First, iterate over the elements of a set.<\/li><li>Second, apply an <code>expression<\/code> to each element<\/li><li>Third, create a new set of elements resulting from the expression.<\/li><\/ul>\n\n\n\n<p>In addition, the set comprehension allows you to select which element to apply the expression via a <code>condition<\/code> in the <code>if<\/code> clause.<\/p>\n\n\n\n<p class=\"note\">Note that the set comprehension returns a new set, it doesn&#8217;t modify the original set.<\/p>\n\n\n\n<p>Back to the previous example, you can convert all the tags in the <code>tags<\/code> set by using the following set comprehension:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">tags = {<span class=\"hljs-string\">'Django'<\/span>, <span class=\"hljs-string\">'Pandas'<\/span>, <span class=\"hljs-string\">'Numpy'<\/span>}\nlowercase_tags = {tag.lower() <span class=\"hljs-keyword\">for<\/span> tag <span class=\"hljs-keyword\">in<\/span> tags}\n\nprint(lowercase_tags)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>This syntax definitely looks more concise than a for loop and more elegant than the <code>map()<\/code> function.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Python Set comprehension with an if clause example<\/h3>\n\n\n\n<p>Suppose you want to convert all elements of the <code>tags<\/code> set to lowercase except for the <code>Numpy<\/code>. <\/p>\n\n\n\n<p>To do it, you can add a condition to the set comprehension like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">tags = {<span class=\"hljs-string\">'Django'<\/span>, <span class=\"hljs-string\">'Pandas'<\/span>, <span class=\"hljs-string\">'Numpy'<\/span>}\nnew_tags = {tag.lower() <span class=\"hljs-keyword\">for<\/span> tag <span class=\"hljs-keyword\">in<\/span> tags <span class=\"hljs-keyword\">if<\/span> tag != <span class=\"hljs-string\">'Numpy'<\/span>}\n\nprint(new_tags)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">{<span class=\"hljs-string\">'django'<\/span>, <span class=\"hljs-string\">'pandas'<\/span>}<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use Python set comprehension to create a new set based on an existing set by applying an expression to each element of the existing set.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"628\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-set-comprehension\/\"\n\t\t\t\tdata-post-title=\"Python Set Comprehension\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"628\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-set-comprehension\/\"\n\t\t\t\tdata-post-title=\"Python Set Comprehension\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the Python set comprehension to create a new set based on an existing set by applying an expression to each element of the existing set.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":37,"menu_order":39,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/628"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=628"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/628\/revisions"}],"predecessor-version":[{"id":4839,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/628\/revisions\/4839"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/37"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=628"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}