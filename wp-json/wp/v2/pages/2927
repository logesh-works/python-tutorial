{"id":2927,"date":"2021-11-14T16:33:27","date_gmt":"2021-11-14T16:33:27","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=2927"},"modified":"2021-11-15T11:58:36","modified_gmt":"2021-11-15T11:58:36","slug":"python-enum-unique","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-enum-unique\/","title":{"rendered":"Python Enum aliases &#038; @enum.unique Decorator"},"content":{"rendered":"\n<p><strong>Summary<\/strong>:  in this tutorial, you&#8217;ll learn about enumeration member aliases and how to use the enum unique decorator to ensure the uniqueness of member values. <\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the enum aliases<\/h2>\n\n\n\n<p>By definition, the <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-enumeration\/\">enumeration <\/a>member values are unique. However, you can create different member names with the same values.<\/p>\n\n\n\n<p>For example, the following defines the <code>Color<\/code> enumeration:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> enum <span class=\"hljs-keyword\">import<\/span> Enum\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Color<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    RED = <span class=\"hljs-number\">1<\/span>\n    CRIMSON = <span class=\"hljs-number\">1<\/span>\n    SALMON = <span class=\"hljs-number\">1<\/span>\n    GREEN = <span class=\"hljs-number\">2<\/span>\n    BLUE = <span class=\"hljs-number\">3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>Color<\/code> enumeration has the <code>RED<\/code>, <code>CRIMSON<\/code>, and <code>SALMON<\/code> members with the same value 1. <\/p>\n\n\n\n<p>When you define multiple members in an enumeration with the same values, Python does not create different members but aliases. <\/p>\n\n\n\n<p>In this example, the <code>RED<\/code> is the main member while the <code>CRIMSON<\/code> and <code>SALMON<\/code> members are the aliases of the <code>RED<\/code> member<\/p>\n\n\n\n<p>The following statements return <code>True<\/code> because <code>CRIMSON<\/code> and <code>SALMON<\/code> members are RED meber:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">print(Color.RED <span class=\"hljs-keyword\">is<\/span> Color.CRIMSON)\nprint(Color.RED <span class=\"hljs-keyword\">is<\/span> Color.SALMON)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-literal\">True<\/span>\n<span class=\"hljs-literal\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you look up a member by value, you&#8217;ll always get the main member, not aliases. For example, the following statement returns the <code>RED<\/code> member:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">print(Color(<span class=\"hljs-number\">1<\/span>))<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Color.RED<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you iterate the members of an enumeration with aliases, you&#8217;ll get only the main members, not the aliases. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for<\/span> color <span class=\"hljs-keyword\">in<\/span> Color:\n    print(color)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>It returns only three members:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">Color.RED\nColor.GREEN\nColor.BLUE<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get all the members including aliases, you need to use the <code>__member__<\/code> property of the enumeration class. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> enum <span class=\"hljs-keyword\">import<\/span> Enum\n<span class=\"hljs-keyword\">from<\/span> pprint <span class=\"hljs-keyword\">import<\/span> pprint\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Color<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    RED = <span class=\"hljs-number\">1<\/span>\n    CRIMSON = <span class=\"hljs-number\">1<\/span>\n    SALMON = <span class=\"hljs-number\">1<\/span>\n    GREEN = <span class=\"hljs-number\">2<\/span>\n    BLUE = <span class=\"hljs-number\">3<\/span>\n\n\npprint(Color.__members__)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">mappingproxy({<span class=\"hljs-string\">'BLUE'<\/span>: &lt;Color.BLUE: <span class=\"hljs-number\">3<\/span>&gt;,\n              <span class=\"hljs-string\">'CRIMSON'<\/span>: &lt;Color.RED: <span class=\"hljs-number\">1<\/span>&gt;,\n              <span class=\"hljs-string\">'GREEN'<\/span>: &lt;Color.GREEN: <span class=\"hljs-number\">2<\/span>&gt;,\n              <span class=\"hljs-string\">'RED'<\/span>: &lt;Color.RED: <span class=\"hljs-number\">1<\/span>&gt;,\n              <span class=\"hljs-string\">'SALMON'<\/span>: &lt;Color.RED: <span class=\"hljs-number\">1<\/span>&gt;})<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>As shown clearly from the output, the <code>CRIMSON<\/code> and <code>SALMON<\/code> reference the same object which is referenced by the <code>RED<\/code> member:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&lt;Color.RED: <span class=\"hljs-number\">1<\/span>&gt;<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">When to use enum aliases<\/h2>\n\n\n\n<p>Enumeration aliases can be helpful in some situations. For example, suppose that you have to deal with API from two different systems. And each system has a different response status doe with the same meaning as shown in the following table:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th> System 1 <\/th><th>System 2<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td>REQUESTING<\/td><td>PENDING<\/td><td>The request is in progress<\/td><\/tr><tr><td>OK<\/td><td>FULFILLED<\/td><td>The request was completed successfully<\/td><\/tr><tr><td>NOT_OK<\/td><td>REJECTED<\/td><td>The request was failed<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>To standardize the status codes from these systems, you can use enumeration aliases as follows:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><thead><tr><th>Your System<\/th><th> System 1 <\/th><th>System 2<\/th><th>Meaning<\/th><\/tr><\/thead><tbody><tr><td>IN_PROGRESS<\/td><td>REQUESTING<\/td><td>PENDING<\/td><td>The request is in progress<\/td><\/tr><tr><td>SUCCESS<\/td><td>OK<\/td><td>FULFILLED<\/td><td>The request was completed successfully<\/td><\/tr><tr><td>ERROR<\/td><td>NOT_OK<\/td><td>REJECTED<\/td><td>The request was failed<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>The following defines the <code>ResponseStatus<\/code> enumeration with aliases:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> enum <span class=\"hljs-keyword\">import<\/span> Enum\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">ResponseStatus<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    <span class=\"hljs-comment\"># in progress<\/span>\n    IN_PROGRESS = <span class=\"hljs-number\">1<\/span>\n    REQUESTING = <span class=\"hljs-number\">1<\/span>\n    PENDING = <span class=\"hljs-number\">1<\/span>\n\n    <span class=\"hljs-comment\"># success<\/span>\n    SUCCESS = <span class=\"hljs-number\">2<\/span>\n    OK = <span class=\"hljs-number\">2<\/span>\n    FULFILLED = <span class=\"hljs-number\">2<\/span>\n\n    <span class=\"hljs-comment\"># error<\/span>\n    ERROR = <span class=\"hljs-number\">3<\/span>\n    NOT_OK = <span class=\"hljs-number\">3<\/span>\n    REJECTED = <span class=\"hljs-number\">3<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The following compares the response code from system 1 to check if the request was successful or not:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">code = <span class=\"hljs-string\">'OK'<\/span>\n<span class=\"hljs-keyword\">if<\/span> ResponseStatus&#91;code] <span class=\"hljs-keyword\">is<\/span> ResponseStatus.SUCCESS:\n    print(<span class=\"hljs-string\">'The request completed successfully'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">The request completed successfully<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Likewise, you can check the response code from system 2 to see if the request was successful:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">code = <span class=\"hljs-string\">'FULFILLED'<\/span>\n<span class=\"hljs-keyword\">if<\/span> ResponseStatus&#91;code] <span class=\"hljs-keyword\">is<\/span> ResponseStatus.SUCCESS:\n    print(<span class=\"hljs-string\">'The request completed successfully'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">print(<span class=\"hljs-string\">'The request completed successfully'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">@enum.unique decorator<\/h2>\n\n\n\n<p>To define an enumeration with no aliases, you can carefully use unique values for the members. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> enum <span class=\"hljs-keyword\">import<\/span> Enum\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Day<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    MON = <span class=\"hljs-string\">'Monday'<\/span>\n    TUE = <span class=\"hljs-string\">'Tuesday'<\/span>\n    WED = <span class=\"hljs-string\">'Wednesday'<\/span>\n    THU = <span class=\"hljs-string\">'Thursday'<\/span>\n    FRI = <span class=\"hljs-string\">'Friday'<\/span>\n    SAT = <span class=\"hljs-string\">'Saturday'<\/span>\n    SUN = <span class=\"hljs-string\">'Sunday'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>But you can accidentally use the same values for two members like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Day<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    MON = <span class=\"hljs-string\">'Monday'<\/span>\n    TUE = <span class=\"hljs-string\">'Monday'<\/span>\n    WED = <span class=\"hljs-string\">'Wednesday'<\/span>\n    THU = <span class=\"hljs-string\">'Thursday'<\/span>\n    FRI = <span class=\"hljs-string\">'Friday'<\/span>\n    SAT = <span class=\"hljs-string\">'Saturday'<\/span>\n    SUN = <span class=\"hljs-string\">'Sunday'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>TUE<\/code> member is the alias of the <code>MON<\/code> member, which you may not expect.<\/p>\n\n\n\n<p>To ensure an enumeration has no alias, you can use the <code>@enum.unique<\/code> decorator from the <code>enum<\/code> module.<\/p>\n\n\n\n<p>When you decorate an enumeration with the <code>@enum.unique<\/code> decorator, Python will throw an exception if the enumeration has aliases. <\/p>\n\n\n\n<p>For example, the following will raise a <code>ValueError<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> enum\n\n<span class=\"hljs-keyword\">from<\/span> enum <span class=\"hljs-keyword\">import<\/span> Enum\n\n\n<span class=\"hljs-meta\">@enum.unique<\/span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Day<\/span><span class=\"hljs-params\">(Enum)<\/span>:<\/span>\n    MON = <span class=\"hljs-string\">'Monday'<\/span>\n    TUE = <span class=\"hljs-string\">'Monday'<\/span>\n    WED = <span class=\"hljs-string\">'Wednesday'<\/span>\n    THU = <span class=\"hljs-string\">'Thursday'<\/span>\n    FRI = <span class=\"hljs-string\">'Friday'<\/span>\n    SAT = <span class=\"hljs-string\">'Saturday'<\/span>\n    SUN = <span class=\"hljs-string\">'Sunday'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-19\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">ValueError: duplicate values found <span class=\"hljs-keyword\">in<\/span> &lt;enum <span class=\"hljs-string\">'Day'<\/span>&gt;: TUE -&gt; MON<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-19\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>When an enumeration has different members with the same values, the first member is the main member while others are aliases of the main member.<\/li><li>Use the <code>@enum.unique<\/code> decorator from the <code>enum<\/code> module to enforce the uniqueness of the values of the members.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"2927\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-enum-unique\/\"\n\t\t\t\tdata-post-title=\"Python Enum aliases &#038; @enum.unique Decorator\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"2927\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-enum-unique\/\"\n\t\t\t\tdata-post-title=\"Python Enum aliases &#038; @enum.unique Decorator\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Iin this tutorial, you&#8217;ll learn about enumeration member aliases and how to use the enum unique decorator to ensure the uniqueness of member values.n this tutorial, you&#8217;ll learn about enumeration member aliases and how to use the enum unique decorator to ensure the uniqueness of member values.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":417,"menu_order":28,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2927"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=2927"}],"version-history":[{"count":4,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2927\/revisions"}],"predecessor-version":[{"id":2954,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/2927\/revisions\/2954"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/417"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=2927"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}