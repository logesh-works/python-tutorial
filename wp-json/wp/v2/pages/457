{"id":457,"date":"2020-10-11T09:04:34","date_gmt":"2020-10-11T09:04:34","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=457"},"modified":"2021-12-07T10:00:01","modified_gmt":"2021-12-07T10:00:01","slug":"python-__init__","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-__init__\/","title":{"rendered":"Python __init__"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the Python  <code>__init__()<\/code> method to initialize object&#8217;s attributes.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the Python __init__() method<\/h2>\n\n\n\n<p>When you create a new object of a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-class\/\">class<\/a>, Python automatically calls the <code>__init__()<\/code> method to initialize the <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-instance-variables\/\">object&#8217;s attributes<\/a>.<\/p>\n\n\n\n<p>Unlike regular <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-methods\/\">methods<\/a>, the <code>__init__()<\/code> method has two underscores (__) on each side. Therefore, the <code>__init__()<\/code> is often called dunder init. The name comes abbreviation of the double underscores init.<\/p>\n\n\n\n<p>The double underscores at both sides of the <code>__init__()<\/code> method indicate that Python will use the method internally. In other words, you should not explicitly call this method.<\/p>\n\n\n\n<p>Since Python will automatically call the <code>__init__()<\/code> method immediately after creating a new object, you can use the <code>__init__()<\/code> method to initialize the object&#8217;s attributes.<\/p>\n\n\n\n<p>The following defines the <code>Person<\/code> class with the <code>__init__()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Person<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, name, age)<\/span>:<\/span>\n        self.name = name\n        self.age = age\n\n\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    person = Person(<span class=\"hljs-string\">'John'<\/span>, <span class=\"hljs-number\">25<\/span>)\n    print(<span class=\"hljs-string\">f\"I'm <span class=\"hljs-subst\">{person.name}<\/span>. I'm <span class=\"hljs-subst\">{person.age}<\/span> years old.\"<\/span>)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>When you create an instance of the <code>Person<\/code> class, Python performs two things:<\/p>\n\n\n\n<ul><li>First, create a new instance of the <code>Person<\/code> class by setting the object&#8217;s namespace such as <code>__dict__<\/code> attribute to empty (<code>{}<\/code>).<\/li><li>Second, call the <code>__init__<\/code> method to initialize the attributes of the newly created object.<\/li><\/ul>\n\n\n\n<p>Note that the <code>__init__<\/code> method doesn&#8217;t create the object but only initializes the object&#8217;s attributes. Hence, the <code>__init__()<\/code> is not a constructor.<\/p>\n\n\n\n<p>If the <code>__init__<\/code> has parameters other than the <code>self<\/code>, you need to pass the corresponding arguments when creating a new object like the example above. Otherwise, you&#8217;ll get an error.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The __init__ method with default parameters<\/h3>\n\n\n\n<p>The  <code>__init__()<\/code> method&#8217;s parameters can have default values. For example:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">class Person:\r\n    def __init__(self, name, age=22):\r\n        self.name = name\r\n        self.age = age\r\n\r\n\r\nif __name__ == '__main__':\r\n    person = Person('John')\r\n    print(f\"I'm {person.name}. I'm {person.age} years old.\")\r\n<\/code><\/span><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">I<span class=\"hljs-string\">'m John. I'<\/span>m <span class=\"hljs-number\">22<\/span> years old.<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, the <code>age<\/code> parameter has a default value of <code>22<\/code>. Because we don&#8217;t pass an argument to the <code>Person()<\/code>, the <code>age<\/code> uses the default value.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>__init__()<\/code> method to initialize the object&#8217;s attributes.<\/li><li>The <code>__init__()<\/code> doesn&#8217;t create an object but is automatically called after the object is created.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"457\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-__init__\/\"\n\t\t\t\tdata-post-title=\"Python __init__\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"457\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-__init__\/\"\n\t\t\t\tdata-post-title=\"Python __init__\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the Python  __init__() method.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":417,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/457"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=457"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/457\/revisions"}],"predecessor-version":[{"id":3307,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/457\/revisions\/3307"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/417"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=457"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}