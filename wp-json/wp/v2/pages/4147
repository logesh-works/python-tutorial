{"id":4147,"date":"2022-07-18T07:31:03","date_gmt":"2022-07-18T07:31:03","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=4147"},"modified":"2023-06-03T07:59:39","modified_gmt":"2023-06-03T07:59:39","slug":"python-asyncio-wait_for","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-asyncio-wait_for\/","title":{"rendered":"Python asyncio.wait_for()"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the <code>asyncio.wait_for()<\/code> function to wait for a coroutine to complete with a timeout.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the Python asyncio.wait_for() function<\/h2>\n\n\n\n<p>In the previous tutorial, you learned how to cancel a task that is in progress by using the <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-cancel-tasks\/\">cancel()<\/a><\/code> method of the <code>Task<\/code> object.<\/p>\n\n\n\n<p>To wait for a task to complete with a timeout, you can use the <code>asyncio.wait_for()<\/code> function. The <code>asyncio.wait_for()<\/code> function waits for a single task to be completed with a timeout.<\/p>\n\n\n\n<p>When a timeout occurs, the <code>asyncio.wait_for()<\/code> function cancels the task and raises the <code>TimeoutError<\/code> exception. Otherwise, it returns the result of the task. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> asyncio\n<span class=\"hljs-keyword\">from<\/span> asyncio.exceptions <span class=\"hljs-keyword\">import<\/span> TimeoutError\n\n\n<span class=\"hljs-keyword\">async<\/span> def call_api(message, result=<span class=\"hljs-number\">1000<\/span>, delay=<span class=\"hljs-number\">3<\/span>):\n    print(message)\n    <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(delay)\n    <span class=\"hljs-keyword\">return<\/span> result\n\n\n<span class=\"hljs-keyword\">async<\/span> def main():\n    task = asyncio.create_task(\n        call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n    )\n\n    MAX_TIMEOUT = <span class=\"hljs-number\">3<\/span>\n    <span class=\"hljs-attr\">try<\/span>:\n        <span class=\"hljs-keyword\">await<\/span> asyncio.wait_for(task, timeout=MAX_TIMEOUT)\n    except TimeoutError:\n        print(<span class=\"hljs-string\">'The task was cancelled due to a timeout'<\/span>)\n\nasyncio.run(main())\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Calling API...\nThe task was cancelled due to a timeout<\/code><\/span><\/pre>\n\n\n<p>How it works<\/p>\n\n\n\n<p>First, define a <code>call_api()<\/code> coroutine that takes 3 seconds to complete by default:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async<\/span> def call_api(message, result=<span class=\"hljs-number\">1000<\/span>, delay=<span class=\"hljs-number\">3<\/span>):\n    print(message)\n    <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(delay)\n    <span class=\"hljs-keyword\">return<\/span> result<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, create a task that wraps the call_api coroutine and takes 5 seconds to complete:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">task = asyncio.create_task(\n    call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, use the <code>asyncio.wait_for()<\/code> function to wait for the task to complete with a timeout of 3 seconds. Since the task takes 5 seconds to complete, a timeout will occur and a <code>TimeoutError<\/code> will be raised:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">MAX_TIMEOUT = <span class=\"hljs-number\">3<\/span>\n<span class=\"hljs-keyword\">try<\/span>:\n    await asyncio.wait_for(task, timeout=MAX_TIMEOUT)\nexcept TimeoutError:\n    <span class=\"hljs-keyword\">print<\/span>(<span class=\"hljs-string\">'The task was cancelled due to a timeout'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Shielding a task from cancellation<\/h2>\n\n\n\n<p>Sometimes, you may want to inform users that a task is taking longer than expected after a certain amount of time but not cancel the task when a timeout is exceeded.<\/p>\n\n\n\n<p>To do that, you can wrap the task with the <code>asyncio.shield()<\/code> function. The <code>asyncio.shield()<\/code> prevents the cancellation of a task. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import<\/span> asyncio\n<span class=\"hljs-keyword\">from<\/span> asyncio.exceptions <span class=\"hljs-keyword\">import<\/span> TimeoutError\n\n\n<span class=\"hljs-keyword\">async<\/span> def call_api(message, result=<span class=\"hljs-number\">1000<\/span>, delay=<span class=\"hljs-number\">3<\/span>):\n    print(message)\n    <span class=\"hljs-keyword\">await<\/span> asyncio.sleep(delay)\n    <span class=\"hljs-keyword\">return<\/span> result\n\n\n<span class=\"hljs-keyword\">async<\/span> def main():\n    task = asyncio.create_task(\n        call_api(<span class=\"hljs-string\">'Calling API...'<\/span>, result=<span class=\"hljs-number\">2000<\/span>, delay=<span class=\"hljs-number\">5<\/span>)\n    )\n\n    MAX_TIMEOUT = <span class=\"hljs-number\">3<\/span>\n    <span class=\"hljs-attr\">try<\/span>:\n        <span class=\"hljs-keyword\">await<\/span> asyncio.wait_for(asyncio.shield(task), timeout=MAX_TIMEOUT)\n    except TimeoutError:\n        print(<span class=\"hljs-string\">'The task took more than expected and will complete soon.'<\/span>)\n        result = <span class=\"hljs-keyword\">await<\/span> task\n        print(result)\n\nasyncio.run(main())\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">Calling API...\nThe task took more than expected and will complete soon.\n2000<\/code><\/span><\/pre>\n\n\n<p>In this example, the task takes 5 seconds to complete. Once the timeout is 3 seconds, the <code>TimeoutEror<\/code> exception is raised. However, the task is not canceled due to the <code>asyncio.shield()<\/code> function.<\/p>\n\n\n\n<p>In the exception handling section, we <code>await<\/code> for the task to be completed and print out the result.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>Use <code>asyncio.wait_for()<\/code> function to wait for a task with a timeout.<\/li>\n\n\n\n<li>Use <code>asyncio.shield()<\/code> function to prevent the cancellation of a task after a timeout.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4147\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-asyncio-wait_for\/\"\n\t\t\t\tdata-post-title=\"Python asyncio.wait_for()\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4147\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-asyncio-wait_for\/\"\n\t\t\t\tdata-post-title=\"Python asyncio.wait_for()\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to use the asyncio.wait_for() function to wait for a coroutine to complete with a timeout.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4104,"menu_order":18,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4147"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=4147"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4147\/revisions"}],"predecessor-version":[{"id":6558,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4147\/revisions\/6558"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4104"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=4147"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}