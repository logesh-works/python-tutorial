{"id":505,"date":"2020-10-13T06:22:41","date_gmt":"2020-10-13T06:22:41","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=505"},"modified":"2020-11-11T06:57:55","modified_gmt":"2020-11-11T06:57:55","slug":"python-args","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-args\/","title":{"rendered":"Python *args"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the Python <code>*args<\/code> parameters and how to use them for defining variadic functions.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Tuple unpacking<\/h2>\n\n\n\n<p>The following unpacks a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-tuples\/\">tuple<\/a> into two <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-variables\/\">variables<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">x, y = 10, 20<\/code><\/span><\/pre>\n\n\n<p>Python assigns 10 to x and 20 to y. It&#8217;s similar to passing two arguments to a function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">def add(x, y):\n    <span class=\"hljs-keyword\">return<\/span> x + y\n\n\nadd(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, Python passed <code>10<\/code> to <code>x<\/code> and <code>20<\/code> to <code>y<\/code>.<\/p>\n\n\n\n<p>Similarly, the following assigns <code>10<\/code> to <code>x<\/code>, <code>20<\/code> to <code>y<\/code>, and the <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list\/\">list<\/a> <code>[30, 40]<\/code> to <code>z<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">x, y, *z = <span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>, <span class=\"hljs-number\">40<\/span>\n\n<span class=\"hljs-keyword\">print<\/span>(x)\n<span class=\"hljs-keyword\">print<\/span>(y)\n<span class=\"hljs-keyword\">print<\/span>(z)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Python uses the same concept for the function arguments. For example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">\ndef add(x, y, *args):\n    total = x + y\n    <span class=\"hljs-keyword\">for<\/span> arg in args:\n        total += arg\n\n    <span class=\"hljs-keyword\">return<\/span> total\n\n\nresult = add(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>, <span class=\"hljs-number\">40<\/span>)\n<span class=\"hljs-keyword\">print<\/span>(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>add<\/code> function accepts three parameters <code>x<\/code>, <code>y<\/code>, and <code>*args<\/code>. The <code>*args<\/code> is a special argument preceded by a star (<code>*<\/code>).<\/p>\n\n\n\n<p>When passing the positional arguments <code>10<\/code>, <code>20<\/code>, <code>30<\/code>, and <code>40<\/code> to the function, Python assigns <code>10<\/code> to <code>x<\/code>, <code>20<\/code> to <code>y<\/code>, and a tuple <code>(30, 40)<\/code> to <code>args<\/code>. <\/p>\n\n\n\n<p>It&#8217;s like <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-unpacking-tuple\/\">tuple unpacking<\/a> except that the <code>args<\/code> is a tuple, not a list.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the Python *args parameter<\/h2>\n\n\n\n<p>When a function has a parameter preceded by an asterisk (<code>*<\/code>), it can accept a variable number of arguments. And you can pass zero, one, or more arguments to the <code>*args<\/code> parameter.<\/p>\n\n\n\n<p>In Python, the parameters like <code>*args<\/code> are called variadic parameters. Functions that have variadic parameters are called variadic functions.<\/p>\n\n\n\n<p>Note that you don&#8217;t need to name <code>args<\/code> for a variadic parameter. For example, you can use any meaningful names like <code>*numbers<\/code>, <code>*strings<\/code>, <code>*lists<\/code>, etc. <\/p>\n\n\n\n<p>However, by convention, Python uses  the <code>*args<\/code> for a variadic parameter.<\/p>\n\n\n\n<p>Let&#8217;s take a look at the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(*args)<\/span>:<\/span>\n    print(args)\n\n\nadd()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output: <\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>The <code>add<\/code> function shows an empty <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-tuples\/\">tuple<\/a>.<\/p>\n\n\n\n<p>The following shows the type of the <code>args<\/code> argument and its contents:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(*args)<\/span>:<\/span>\n    print(type(args))\n    print(args)\n\nadd()\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">&lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> '<span class=\"hljs-title\">tuple<\/span>'&gt;\n<span class=\"hljs-params\">()<\/span><\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since we didn&#8217;t pass any argument to the <code>add()<\/code> function, the output shows an empty tuple.<\/p>\n\n\n\n<p>The following passes three arguments to the <code>add()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(*args)<\/span>:<\/span>\n    print(args)\n\n\nadd(<span class=\"hljs-number\">1<\/span>,<span class=\"hljs-number\">2<\/span>,<span class=\"hljs-number\">3<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Now, the <code>args<\/code> has three numbers 1, 2, and 3. To access each element of the <code>args<\/code> argument, you use the square bracket notation <code>[]<\/code> with an index:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(*args)<\/span>:<\/span>\n    print(args&#91;<span class=\"hljs-number\">0<\/span>])\n    print(args&#91;<span class=\"hljs-number\">1<\/span>])\n    print(args&#91;<span class=\"hljs-number\">2<\/span>])\n\n\nadd(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Also, you an use a <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-for-loop-list\/\"><code>for<\/code> loop<\/a> to iterate over the elements of the tuple.<\/p>\n\n\n\n<p>The following shows how to add all numbers of the <code>args<\/code> tuple in the <code>add()<\/code> function:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">add<\/span><span class=\"hljs-params\">(*args)<\/span>:<\/span>\n    total = <span class=\"hljs-number\">0<\/span>\n    <span class=\"hljs-keyword\">for<\/span> arg <span class=\"hljs-keyword\">in<\/span> args:\n        total += arg\n    <span class=\"hljs-keyword\">return<\/span> total\n\n\ntotal = add(<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>)\nprint(total)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-number\">6<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Python *args argument exhausts positional arguments<\/h2>\n\n\n\n<p>If you use the <code>*args<\/code> argument, you cannot add more positional arguments. However, you can use <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-keyword-arguments\/\">keyword arguments<\/a>.<\/p>\n\n\n\n<p>The following example results in an error because it uses a positional argument after the <code>*arg<\/code> argument:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">def add(x, y, *args, z):\n    <span class=\"hljs-keyword\">return<\/span> x + y + sum(args) + z\n\n\nadd(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>, <span class=\"hljs-number\">40<\/span>, <span class=\"hljs-number\">50<\/span>)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">TypeError<\/span>: add() missing <span class=\"hljs-number\">1<\/span> required keyword-only argument: <span class=\"hljs-string\">'z'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To fix it, you need to use a keyword argument after the <code>*args<\/code> argument as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">def add(x, y, *args, z):\n    <span class=\"hljs-keyword\">return<\/span> x + y + sum(args) + z\n\n\nadd(<span class=\"hljs-number\">10<\/span>, <span class=\"hljs-number\">20<\/span>, <span class=\"hljs-number\">30<\/span>, <span class=\"hljs-number\">40<\/span>, z=<span class=\"hljs-number\">50<\/span>)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, Python assigns <code>10<\/code> to <code>x<\/code>, <code>20<\/code> to <code>y<\/code>,<code>(30,40)<\/code> to <code>args<\/code>, and <code>50<\/code> to <code>z<\/code>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Unpacking arguments<\/h2>\n\n\n\n<p>The following <code>point<\/code> function accepts two arguments and returns a string representation of a point with x-coordinate and y-coordinate:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\">def point(x, y):\n    <span class=\"hljs-keyword\">return<\/span> f<span class=\"hljs-string\">'({x},{y})'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>If you pass a tuple to the <code>point<\/code> function, you&#8217;ll get an error:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">a = (0, 0)\norigin = point(a)<\/code><\/span><\/pre>\n\n\n<p>Error:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"JavaScript\" data-shcb-language-slug=\"javascript\"><span><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">TypeError<\/span>: point() missing <span class=\"hljs-number\">1<\/span> required positional argument: <span class=\"hljs-string\">'y'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">JavaScript<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">javascript<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To fix this, you need to prefix the tuple <code>a<\/code> with the operator <code>*<\/code> like this:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">def point(x, y):\n    <span class=\"hljs-keyword\">return<\/span> f<span class=\"hljs-string\">'({x},{y})'<\/span>\n\n\na = (<span class=\"hljs-number\">0<\/span>, <span class=\"hljs-number\">0<\/span>)\norigin = point(*a)\n<span class=\"hljs-keyword\">print<\/span>(origin)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\"><span><code class=\"hljs\">(0,0)<\/code><\/span><\/pre>\n\n\n<p>When you precede the argument <code>a<\/code> with the operator <code>*<\/code>, Python unpacks the tuple and assigns its elements to <code>x<\/code> and <code>y<\/code> parameters.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use Python <code>*arg<\/code> arguments for a function that accepts a variable number of arguments.<\/li><li>The <code>*args<\/code> argument exhausts positional arguments so you can only use keyword arguments after it.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"505\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-args\/\"\n\t\t\t\tdata-post-title=\"Python *args\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"505\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-args\/\"\n\t\t\t\tdata-post-title=\"Python *args\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the Python *args parameters and how to use them for defining variadic functions.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":37,"menu_order":51,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/505"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=505"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/505\/revisions"}],"predecessor-version":[{"id":1049,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/505\/revisions\/1049"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/37"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=505"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}