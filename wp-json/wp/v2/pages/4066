{"id":4066,"date":"2022-07-13T03:25:37","date_gmt":"2022-07-13T03:25:37","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=4066"},"modified":"2023-06-05T13:55:25","modified_gmt":"2023-06-05T13:55:25","slug":"python-multithreading-example","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multithreading-example\/","title":{"rendered":"Python Multithreading Example"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to use the Python threading module to develop a multithreaded program.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Extending the Thread class<\/h2>\n\n\n\n<p>We&#8217;ll develop a multithreaded program that scraps the stock prices from the <a href=\"https:\/\/finance.yahoo.com\/\" target=\"_blank\" rel=\"noreferrer noopener nofollow\">Yahoo Finance website<\/a>. <\/p>\n\n\n\n<p>To do that, we&#8217;ll use two third-party packages:<\/p>\n\n\n\n<ul>\n<li><code>requests<\/code> &#8211; to get the contents of a webpage.<\/li>\n\n\n\n<li><code>lxml<\/code> &#8211; to select a specific element of an HTML document.<\/li>\n<\/ul>\n\n\n\n<p>First, install the <code>requests<\/code> and <code>lxml<\/code> modules using the <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-pip\/\">pip command<\/a>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">pip install request lxml<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Next, define a new class called <code>Stock<\/code> that <a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-inheritance\/\">inherits<\/a> from the <code>Thread<\/code> class of the <code>threading<\/code> module. We&#8217;ll place the Stock class in <code>stock.py<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> threading\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stock<\/span><span class=\"hljs-params\">(threading.Thread)<\/span>:<\/span>\n   <span class=\"hljs-keyword\">pass<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Then, implement the <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-__init__\/\"><code>__init__()<\/code><\/a><\/code> method that accepts a symbol and initializes the <code>url<\/code> instance variable based on the symbol:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> threading\n<span class=\"hljs-keyword\">import<\/span> requests\n<span class=\"hljs-keyword\">from<\/span> lxml <span class=\"hljs-keyword\">import<\/span> html\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stock<\/span><span class=\"hljs-params\">(threading.Thread)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, symbol: str)<\/span> -&gt; <span class=\"hljs-keyword\">None<\/span>:<\/span>\n        super().__init__()\n\n        self.symbol = symbol\n        self.url = <span class=\"hljs-string\">f'https:\/\/finance.yahoo.com\/quote\/<span class=\"hljs-subst\">{symbol}<\/span>'<\/span>\n        self.price = <span class=\"hljs-literal\">None<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>For example, if you pass the symbol <code>GOOG<\/code> to the <code>__init__()<\/code> method, the URL will be:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">https:&#47;&#47;finance.yahoo.com\/quote\/GOOG<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>After that, override the <code>run()<\/code> method of the <code>Thread<\/code> class. The <code>run()<\/code> method gets the contents from the <code>self.url<\/code> and grabs the stock price:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stock<\/span><span class=\"hljs-params\">(threading.Thread)<\/span>:<\/span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, symbol: str)<\/span> -&gt; <span class=\"hljs-keyword\">None<\/span>:<\/span>\r\n        super().__init__()\r\n\r\n        self.symbol = symbol\r\n        self.url = <span class=\"hljs-string\">f'https:\/\/finance.yahoo.com\/quote\/<span class=\"hljs-subst\">{symbol}<\/span>'<\/span>\r\n        self.price = <span class=\"hljs-literal\">None<\/span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">run<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        headers = {\r\n            <span class=\"hljs-string\">\"User-Agent\"<\/span>: <span class=\"hljs-string\">\"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/114.0.0.0 Safari\/537.36\"<\/span>\r\n        }\r\n        response = requests.get(self.url, headers=headers)\r\n        <span class=\"hljs-keyword\">if<\/span> response.status_code == <span class=\"hljs-number\">200<\/span>:\r\n            <span class=\"hljs-comment\"># parse the HTML<\/span>\r\n            tree = html.fromstring(response.text)\r\n            <span class=\"hljs-comment\"># get the price in text<\/span>\r\n            price_text = tree.xpath(\r\n                <span class=\"hljs-string\">'\/\/*&#91;@id=\"quote-header-info\"]\/div&#91;3]\/div&#91;1]\/div&#91;1]\/fin-streamer&#91;1]\/text()'<\/span>)\r\n            <span class=\"hljs-keyword\">if<\/span> price_text:\r\n                <span class=\"hljs-keyword\">try<\/span>:\r\n                    self.price = float(price_text&#91;<span class=\"hljs-number\">0<\/span>].replace(<span class=\"hljs-string\">','<\/span>, <span class=\"hljs-string\">''<\/span>))\r\n                <span class=\"hljs-keyword\">except<\/span> ValueError:\r\n                    self.price = <span class=\"hljs-literal\">None<\/span>\r\n\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__str__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\r\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">f'<span class=\"hljs-subst\">{self.symbol}<\/span>\\t<span class=\"hljs-subst\">{self.price}<\/span>'<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>Make a request to the URL using the <code>requests.get()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">headers = {\r\n    <span class=\"hljs-string\">\"User-Agent\"<\/span>: <span class=\"hljs-string\">\"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/114.0.0.0 Safari\/537.36\"<\/span>\r\n}\r\nresponse = requests.get(self.url, headers=headers)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p class=\"note\">Notice that without valid headers, Yahoo will return 404 instead of 200.<\/p>\n\n\n\n<p>If the request is successful, the HTTP status code is 200. In this case, we get the HTML contents from the response and pass it to the <code>fromstring()<\/code> function of the <code>html<\/code> module from the <code>lxml<\/code> package:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> response.status_code == <span class=\"hljs-number\">200<\/span>:\n   tree = html.fromstring(response.text)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Every element on a webpage can be selected using something called XPath. <\/p>\n\n\n\n<p>To get the XPath of an element using Google Chrome, you inspect the page, right-click the element, select copy, and Copy XPath. <\/p>\n\n\n\n<p>The XPath of the stock price at the time of writing this tutorial is as follows:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">\/\/*&#91;@id=<span class=\"hljs-string\">\"quote-header-info\"<\/span>]\/div&#91;<span class=\"hljs-number\">3<\/span>]\/div&#91;<span class=\"hljs-number\">1<\/span>]\/div&#91;<span class=\"hljs-number\">1<\/span>]\/fin-streamer&#91;<span class=\"hljs-number\">1<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>To get the text of the element, you append the <code>text()<\/code> at the end of the XPath:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">\/\/*&#91;@id=<span class=\"hljs-string\">\"quote-header-info\"<\/span>]\/div&#91;<span class=\"hljs-number\">3<\/span>]\/div&#91;<span class=\"hljs-number\">1<\/span>]\/div&#91;<span class=\"hljs-number\">1<\/span>]\/fin-streamer&#91;<span class=\"hljs-number\">1<\/span>]\/text()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Notice that if Yahoo changes the page structure, you need to change the XPath accordingly. Otherwise, the program won&#8217;t work as expected:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">price_text = tree.xpath(<span class=\"hljs-string\">'\/\/*&#91;@id=\"quote-header-info\"]\/div&#91;3]\/div&#91;1]\/div&#91;1]\/fin-streamer&#91;1]\/text()'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Once getting the price as text, we remove the comma and convert it to a number:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> price_text:\n    <span class=\"hljs-keyword\">try<\/span>:\n        self.price = float(price_text&#91;<span class=\"hljs-number\">0<\/span>].replace(<span class=\"hljs-string\">','<\/span>, <span class=\"hljs-string\">''<\/span>))\n    <span class=\"hljs-keyword\">except<\/span> ValueError:\n        self.price = <span class=\"hljs-literal\">None<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, add the <code><a href=\"https:\/\/www.pyprifix.netlify.app\/python-oop\/python-__str__\/\"><code>__str__()<\/code><\/a><\/code> method that returns the string representation of the Stock object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> threading\n<span class=\"hljs-keyword\">import<\/span> requests\n<span class=\"hljs-keyword\">from<\/span> lxml <span class=\"hljs-keyword\">import<\/span> html\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class<\/span> <span class=\"hljs-title\">Stock<\/span><span class=\"hljs-params\">(threading.Thread)<\/span>:<\/span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__init__<\/span><span class=\"hljs-params\">(self, symbol: str)<\/span> -&gt; <span class=\"hljs-keyword\">None<\/span>:<\/span>\n        super().__init__()\n\n        self.symbol = symbol\n        self.url = <span class=\"hljs-string\">f'https:\/\/finance.yahoo.com\/quote\/<span class=\"hljs-subst\">{symbol}<\/span>'<\/span>\n        self.price = <span class=\"hljs-literal\">None<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">run<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        headers = {\r\n            <span class=\"hljs-string\">\"User-Agent\"<\/span>: <span class=\"hljs-string\">\"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/114.0.0.0 Safari\/537.36\"<\/span>\r\n        }\r\n        response = requests.get(self.url, headers=headers)\n        <span class=\"hljs-keyword\">if<\/span> response.status_code == <span class=\"hljs-number\">200<\/span>:\n            <span class=\"hljs-comment\"># parse the HTML<\/span>\n            tree = html.fromstring(response.text)\n            <span class=\"hljs-comment\"># get the price in text<\/span>\n            price_text = tree.xpath(\n                <span class=\"hljs-string\">'\/\/*&#91;@id=\"quote-header-info\"]\/div&#91;3]\/div&#91;1]\/div&#91;1]\/fin-streamer&#91;1]\/text()'<\/span>)\n            <span class=\"hljs-keyword\">if<\/span> price_text:\n                <span class=\"hljs-keyword\">try<\/span>:\n                    self.price = float(price_text&#91;<span class=\"hljs-number\">0<\/span>].replace(<span class=\"hljs-string\">','<\/span>, <span class=\"hljs-string\">''<\/span>))\n                <span class=\"hljs-keyword\">except<\/span> ValueError:\n                    self.price = <span class=\"hljs-literal\">None<\/span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">__str__<\/span><span class=\"hljs-params\">(self)<\/span>:<\/span>\n        <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-string\">f'<span class=\"hljs-subst\">{self.symbol}<\/span>\\t<span class=\"hljs-subst\">{self.price}<\/span>'<\/span>\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Using the Stock class<\/h2>\n\n\n\n<p>The following <code>main.py<\/code> module uses the <code>Stock<\/code> class from the <code>stock.py<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> stock <span class=\"hljs-keyword\">import<\/span> Stock\n\nsymbols = &#91;<span class=\"hljs-string\">'MSFT'<\/span>, <span class=\"hljs-string\">'GOOGL'<\/span>, <span class=\"hljs-string\">'AAPL'<\/span>, <span class=\"hljs-string\">'META'<\/span>]\nthreads = &#91;]\n\n<span class=\"hljs-keyword\">for<\/span> symbol <span class=\"hljs-keyword\">in<\/span> symbols:\n    t = Stock(symbol)\n    threads.append(t)    \n    t.start()\n    \n\n<span class=\"hljs-keyword\">for<\/span> t <span class=\"hljs-keyword\">in<\/span> threads:\n    t.join()\n    print(t)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">MSFT    <span class=\"hljs-number\">253.67<\/span>\nGOOGL   <span class=\"hljs-number\">2280.41<\/span>\nAAPL    <span class=\"hljs-number\">145.86<\/span>\nMETA    <span class=\"hljs-number\">163.27<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, import the <code>Stock<\/code> class from the <code>stock.py<\/code> module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from<\/span> stock <span class=\"hljs-keyword\">import<\/span> Stock<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, initialize a list of symbols:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-16\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">symbols = &#91;<span class=\"hljs-string\">'MSFT'<\/span>, <span class=\"hljs-string\">'GOOGL'<\/span>, <span class=\"hljs-string\">'AAPL'<\/span>, <span class=\"hljs-string\">'META'<\/span>]<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-16\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, create a thread for each symbol, start it, and append the thread to the threads list:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-17\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">threads = &#91;]\n<span class=\"hljs-keyword\">for<\/span> symbol <span class=\"hljs-keyword\">in<\/span> symbols:\n    t = Stock(symbol)\n    threads.append(t)    \n    t.start()\n    <\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-17\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, wait for all the threads in the threads list to complete and print out the stock price:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-18\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for<\/span> t <span class=\"hljs-keyword\">in<\/span> threads:\n    t.join()\n    print(t)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-18\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>Define a class that inherits from the <code>threading.Thread<\/code> class and override the <code>run()<\/code> method.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"4066\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multithreading-example\/\"\n\t\t\t\tdata-post-title=\"Python Multithreading Example\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"4066\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multithreading-example\/\"\n\t\t\t\tdata-post-title=\"Python Multithreading Example\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>Summary: in this tutorial, you&#8217;ll learn how to use the Python threading module to develop a multithreaded program. Extending the Thread class We&#8217;ll develop a multithreaded program that scraps the stock prices from the Yahoo Finance website. To do that, we&#8217;ll use two third-party packages: First, install the requests and lxml modules using the pip [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4104,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4066"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=4066"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4066\/revisions"}],"predecessor-version":[{"id":6618,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4066\/revisions\/6618"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4104"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=4066"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}