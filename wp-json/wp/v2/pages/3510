{"id":3510,"date":"2022-05-16T02:22:59","date_gmt":"2022-05-16T02:22:59","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=3510"},"modified":"2023-06-02T12:15:28","modified_gmt":"2023-06-02T12:15:28","slug":"python-multiprocessing","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multiprocessing\/","title":{"rendered":"Python Multiprocessing"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn how to run code in parallel using the Python multiprocessing module.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the Python multiprocessing<\/h2>\n\n\n\n<p>Generally, programs deal with two types of tasks:<\/p>\n\n\n\n<ol>\n<li>I\/O-bound tasks: if a task does a lot of input\/output operations, it&#8217;s called an I\/O-bound task. Typical examples of I\/O-bound tasks are reading from files, writing to files, connecting to databases, and making a network request. For I\/O-bound tasks, you can use <a href=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-threading\/\">multithreading<\/a> to speed them up.<\/li>\n\n\n\n<li>CPU-bound tasks: when a task does a lot of operations using a CPU, it&#8217;s called a CPU-bound task. For example, number calculation, image resizing, and video streaming are CPU-bound tasks. To speed up the program with lots of CPU-bound tasks, you use multiprocessing.<\/li>\n<\/ol>\n\n\n\n<p>Multiprocessing allows two or more processors to simultaneously process two or more different parts of a program. <\/p>\n\n\n\n<p>In Python, you use the <code>multiprocessing<\/code> module to implement multiprocessing.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Python multiprocessing example<\/h2>\n\n\n\n<p>See the following program:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> time\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">task<\/span><span class=\"hljs-params\">()<\/span>:<\/span>\r\n    result = <span class=\"hljs-number\">0<\/span>\r\n    <span class=\"hljs-keyword\">for<\/span> _ <span class=\"hljs-keyword\">in<\/span> range(<span class=\"hljs-number\">10<\/span>**<span class=\"hljs-number\">8<\/span>):\r\n        result += <span class=\"hljs-number\">1<\/span>\r\n    <span class=\"hljs-keyword\">return<\/span> result\r\n\r\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\r\n    start = time.perf_counter()\r\n    task()\r\n    task()\r\n    finish = time.perf_counter()\r\n\r\n    print(<span class=\"hljs-string\">f'It took <span class=\"hljs-subst\">{finish-start:<span class=\"hljs-number\">.2<\/span>f}<\/span> second(s) to finish'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">It took  <span class=\"hljs-number\">5.55<\/span> second(s) to finish<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, define the <code><code>task()<\/code><\/code> function is a CPU-bound task because it performs a heavy computation by executing a loop for 100 million iterations and incrementing a variable <code>result<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">task<\/span><span class=\"hljs-params\">()<\/span>:<\/span>\r\n    result = <span class=\"hljs-number\">0<\/span>\r\n    <span class=\"hljs-keyword\">for<\/span> _ <span class=\"hljs-keyword\">in<\/span> range(<span class=\"hljs-number\">10<\/span>**<span class=\"hljs-number\">8<\/span>):\r\n        result += <span class=\"hljs-number\">1<\/span>\r\n    <span class=\"hljs-keyword\">return<\/span> result<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, call the <code>task()<\/code> functions twice and record the processing time:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\n    start = time.perf_counter()\n    task()\n    task()\n    finish = time.perf_counter()\n\n    print(<span class=\"hljs-string\">f'It took <span class=\"hljs-subst\">{finish-start: <span class=\"hljs-number\">.2<\/span>f}<\/span> second(s) to finish'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>On our computer, it took 5.55 seconds to complete.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Using multiprocessing module<\/h3>\n\n\n\n<p>The following program uses the multiprocessing module but takes less time:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> time\r\n<span class=\"hljs-keyword\">import<\/span> multiprocessing\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">task<\/span><span class=\"hljs-params\">()<\/span> -&gt; int:<\/span>\r\n    result = <span class=\"hljs-number\">0<\/span>\r\n    <span class=\"hljs-keyword\">for<\/span> _ <span class=\"hljs-keyword\">in<\/span> range(<span class=\"hljs-number\">10<\/span>**<span class=\"hljs-number\">8<\/span>):\r\n        result += <span class=\"hljs-number\">1<\/span>\r\n    <span class=\"hljs-keyword\">return<\/span> result\r\n\r\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\r\n    start = time.perf_counter()\r\n\r\n    p1 = multiprocessing.Process(target=task)\r\n    p2 = multiprocessing.Process(target=task)\r\n\r\n    p1.start()\r\n    p2.start()\r\n\r\n    p1.join()\r\n    p2.join()\r\n\r\n    finish = time.perf_counter()\r\n    print(<span class=\"hljs-string\">f'It took <span class=\"hljs-subst\">{finish-start:<span class=\"hljs-number\">.2<\/span>f}<\/span> second(s) to finish'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">It took  <span class=\"hljs-number\">3.43<\/span> second(s) to finish<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works.<\/p>\n\n\n\n<p>First, import the multiprocessing module:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> multiprocessing<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, create two processes and pass the task function to each:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">p1 = multiprocessing.Process(target=task)\np2 = multiprocessing.Process(target=task)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Note that the <code>Process()<\/code> constructor returns a new <code>Process<\/code> object.<\/p>\n\n\n\n<p>Third, call the <code>start()<\/code> method of the <code>Process<\/code> objects to start the process:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">p1.start()\np2.start()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Finally, wait for the processes to complete by calling the <code>join()<\/code> method:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">p1.join()\np2.join()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Python multiprocessing practical example<\/h2>\n\n\n\n<p>We&#8217;ll use the multiprocessing module to resize the high-resolution images.<\/p>\n\n\n\n<p>First, install the <code>Pillow<\/code> library for image processing:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">pip install Pillow<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Second, develop a program that creates thumbnails of the pictures in the <code>images<\/code> folder and save them to the <code>thumbs<\/code> folder:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> time\r\n<span class=\"hljs-keyword\">import<\/span> os\r\n<span class=\"hljs-keyword\">from<\/span> PIL <span class=\"hljs-keyword\">import<\/span> Image, ImageFilter\r\n\r\nfilenames = &#91;\r\n    <span class=\"hljs-string\">'images\/1.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/2.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/3.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/4.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/5.jpg'<\/span>,\r\n]\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">create_thumbnail<\/span><span class=\"hljs-params\">(filename, size=<span class=\"hljs-params\">(<span class=\"hljs-number\">50<\/span>,<span class=\"hljs-number\">50<\/span>)<\/span>, thumb_dir =<span class=\"hljs-string\">'thumbs'<\/span>)<\/span>:<\/span>\r\n    <span class=\"hljs-comment\"># open the image<\/span>\r\n    img = Image.open(filename)\r\n    \r\n    <span class=\"hljs-comment\"># apply the gaussian blur filter<\/span>\r\n    img = img.filter(ImageFilter.GaussianBlur())\r\n\r\n    <span class=\"hljs-comment\"># create a thumbnail<\/span>\r\n    img.thumbnail(size)\r\n    \r\n    <span class=\"hljs-comment\"># save the image<\/span>\r\n    img.save(<span class=\"hljs-string\">f'<span class=\"hljs-subst\">{thumb_dir}<\/span>\/<span class=\"hljs-subst\">{os.path.basename(filename)}<\/span>'<\/span>)\r\n\r\n    <span class=\"hljs-comment\"># display a message<\/span>\r\n    print(<span class=\"hljs-string\">f'<span class=\"hljs-subst\">{filename}<\/span> was processed...'<\/span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\r\n    start = time.perf_counter()\r\n\r\n    <span class=\"hljs-keyword\">for<\/span> filename <span class=\"hljs-keyword\">in<\/span> filenames:\r\n        create_thumbnail(filename)\r\n        \r\n    finish = time.perf_counter()\r\n\r\n    print(<span class=\"hljs-string\">f'It took <span class=\"hljs-subst\">{finish-start:<span class=\"hljs-number\">.2<\/span>f}<\/span> second(s) to finish'<\/span>)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>On our computer, it took about 4.06 seconds to complete:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-13\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">images\/<span class=\"hljs-number\">1.j<\/span>pg was processed...\r\nimages\/<span class=\"hljs-number\">2.j<\/span>pg was processed...\r\nimages\/<span class=\"hljs-number\">3.j<\/span>pg was processed...\r\nimages\/<span class=\"hljs-number\">4.j<\/span>pg was processed...\r\nimages\/<span class=\"hljs-number\">5.j<\/span>pg was processed...\r\nIt took <span class=\"hljs-number\">4.06<\/span> second(s) to finish<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-13\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Third, modify the program to use multiprocessing. Each process will create a thumbnail for a picture:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-14\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import<\/span> time\r\n<span class=\"hljs-keyword\">import<\/span> os\r\n<span class=\"hljs-keyword\">from<\/span> PIL <span class=\"hljs-keyword\">import<\/span> Image, ImageFilter\r\n\r\n<span class=\"hljs-keyword\">import<\/span> multiprocessing\r\n\r\nfilenames = &#91;\r\n    <span class=\"hljs-string\">'images\/1.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/2.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/3.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/4.jpg'<\/span>,\r\n    <span class=\"hljs-string\">'images\/5.jpg'<\/span>,\r\n]\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">create_thumbnail<\/span><span class=\"hljs-params\">(filename, size=<span class=\"hljs-params\">(<span class=\"hljs-number\">50<\/span>,<span class=\"hljs-number\">50<\/span>)<\/span>, thumb_dir =<span class=\"hljs-string\">'thumbs'<\/span>)<\/span>:<\/span>\r\n    <span class=\"hljs-comment\"># open the image<\/span>\r\n    img = Image.open(filename)\r\n    \r\n    <span class=\"hljs-comment\"># apply the gaussian blur filter<\/span>\r\n    img = img.filter(ImageFilter.GaussianBlur())\r\n\r\n    <span class=\"hljs-comment\"># create a thumbnail<\/span>\r\n    img.thumbnail(size)\r\n    \r\n    <span class=\"hljs-comment\"># save the image<\/span>\r\n    img.save(<span class=\"hljs-string\">f'<span class=\"hljs-subst\">{thumb_dir}<\/span>\/<span class=\"hljs-subst\">{os.path.basename(filename)}<\/span>'<\/span>)\r\n\r\n    <span class=\"hljs-comment\"># display a message<\/span>\r\n    print(<span class=\"hljs-string\">f'<span class=\"hljs-subst\">{filename}<\/span> was processed...'<\/span>)\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def<\/span> <span class=\"hljs-title\">main<\/span><span class=\"hljs-params\">()<\/span>:<\/span>\r\n    start = time.perf_counter()\r\n\r\n    <span class=\"hljs-comment\"># create processes<\/span>\r\n    processes = &#91;multiprocessing.Process(target=create_thumbnail, args=&#91;filename]) \r\n                <span class=\"hljs-keyword\">for<\/span> filename <span class=\"hljs-keyword\">in<\/span> filenames]\r\n\r\n    <span class=\"hljs-comment\"># start the processes<\/span>\r\n    <span class=\"hljs-keyword\">for<\/span> process <span class=\"hljs-keyword\">in<\/span> processes:\r\n        process.start()\r\n\r\n    <span class=\"hljs-comment\"># wait for completion<\/span>\r\n    <span class=\"hljs-keyword\">for<\/span> process <span class=\"hljs-keyword\">in<\/span> processes:\r\n        process.join()\r\n\r\n    finish = time.perf_counter()\r\n\r\n    print(<span class=\"hljs-string\">f'It took <span class=\"hljs-subst\">{finish-start:<span class=\"hljs-number\">.2<\/span>f}<\/span> second(s) to finish'<\/span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if<\/span> __name__ == <span class=\"hljs-string\">'__main__'<\/span>:\r\n    main()<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-14\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-15\" data-shcb-language-name=\"Python\" data-shcb-language-slug=\"python\"><span><code class=\"hljs language-python\">images\/<span class=\"hljs-number\">5.j<\/span>pg was processed...\nimages\/<span class=\"hljs-number\">4.j<\/span>pg was processed...\nimages\/<span class=\"hljs-number\">1.j<\/span>pg was processed...\nimages\/<span class=\"hljs-number\">3.j<\/span>pg was processed...\nimages\/<span class=\"hljs-number\">2.j<\/span>pg was processed...\nIt took <span class=\"hljs-number\">2.92<\/span> second(s) to finish<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-15\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">Python<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">python<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this case, the output shows that the program processed the pictures faster.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul>\n<li>Use Python multiprocessing to run code in parallel to deal with CPU-bound tasks.<\/li>\n<\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"3510\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multiprocessing\/\"\n\t\t\t\tdata-post-title=\"Python Multiprocessing\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"3510\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/python-concurrency\/python-multiprocessing\/\"\n\t\t\t\tdata-post-title=\"Python Multiprocessing\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn how to run code in parallel using the Python multiprocessing module.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":4104,"menu_order":12,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/3510"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=3510"}],"version-history":[{"count":4,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/3510\/revisions"}],"predecessor-version":[{"id":6538,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/3510\/revisions\/6538"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/4104"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=3510"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}