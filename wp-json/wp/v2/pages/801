{"id":801,"date":"2020-10-26T06:44:50","date_gmt":"2020-10-26T06:44:50","guid":{"rendered":"https:\/\/www.pyprifix.netlify.app\/?page_id=801"},"modified":"2020-12-30T03:32:44","modified_gmt":"2020-12-30T03:32:44","slug":"python-is-operator","status":"publish","type":"page","link":"https:\/\/www.pyprifix.netlify.app\/advanced-python\/python-is-operator\/","title":{"rendered":"Python is operator"},"content":{"rendered":"\n<p><strong>Summary<\/strong>: in this tutorial, you&#8217;ll learn about the Python <code>is<\/code> operator and the differences between the <code>is<\/code> operator and equality (<code>==<\/code>) operators.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Introduction to the Python is operator<\/h2>\n\n\n\n<p>Python <code>is<\/code> operator compares two <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-variables\/\">variables<\/a> and returns <code>True<\/code> if they reference the same object. If the two variables reference different objects, the <code>is<\/code> operator returns <code>False<\/code>.<\/p>\n\n\n\n<p>In other words, the <code>is<\/code> operator compares the <strong>identity<\/strong> of two variables and returns <code>True<\/code> if they reference the same object.<\/p>\n\n\n\n<p>Let&#8217;s take a look at the following example:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-1\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">a = <span class=\"hljs-number\">100<\/span>\nb = a\nresult = a is b\n<span class=\"hljs-keyword\">print<\/span>(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-1\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-2\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-2\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>How it works:<\/p>\n\n\n\n<ul><li>First, define the <code>a<\/code> variable that references an <code>int<\/code> object with the value of <code>100<\/code>.<\/li><li>Second, define another variable <code>b<\/code> that references the same object referenced by the <code>a<\/code> variable.<\/li><li>Third, use the <code>is<\/code> operator to check if <code>a<\/code> and <code>b<\/code> reference the same object and display the result.<\/li><\/ul>\n\n\n\n<p>Since both <code>a<\/code> and <code>b<\/code> reference the same object, the result is <code>True<\/code>.<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"424\" height=\"262\" src=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example.png\" alt=\"\" class=\"wp-image-806\" srcset=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example.png 424w, https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example-300x185.png 300w\" sizes=\"(max-width: 424px) 100vw, 424px\" \/><\/figure><\/div>\n\n\n\n<p>The following example defines two variables <code>a<\/code> and <code>b<\/code> and initialize them to <code>100<\/code>:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-3\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">a = <span class=\"hljs-number\">100<\/span>\nb = <span class=\"hljs-number\">100<\/span>\n\nresult = a is b\n<span class=\"hljs-keyword\">print<\/span>(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-3\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-4\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-4\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, there&#8217;s no link between <code>a<\/code> and <code>b<\/code>. However, when you assign <code>100<\/code> to <code>b<\/code>, Python Memory Manager reuses the existing object. Therefore, both <code>a<\/code> and <code>b<\/code> references the same object:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"424\" height=\"262\" src=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example.png\" alt=\"\" class=\"wp-image-806\" srcset=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example.png 424w, https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-Example-300x185.png 300w\" sizes=\"(max-width: 424px) 100vw, 424px\" \/><\/figure><\/div>\n\n\n\n<p class=\"note\">Note that the result of this example may be different, depending on how the Python Memory Manager is implemented. And you should not count on it.<\/p>\n\n\n\n<p>The following example defines two <a href=\"https:\/\/www.pyprifix.netlify.app\/python-basics\/python-list\/\">lists<\/a> with the same elements and uses the <code>is<\/code> operator to check if they reference the same list object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-5\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">ranks = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\nrates = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\n\nresult = ranks is rates\n<span class=\"hljs-keyword\">print<\/span>(result)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-5\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-6\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">False<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-6\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>In this example, lists are <a href=\"https:\/\/www.pyprifix.netlify.app\/advanced-python\/python-mutable-and-immutable\/\">mutable<\/a> objects. Python Memory Manager doesn&#8217;t reuse the existing list but creates a new one in the memory. Therefore, the <code>ranks<\/code> and <code>rates<\/code> variables reference different lists:<\/p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img decoding=\"async\" loading=\"lazy\" width=\"397\" height=\"250\" src=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-List-Example.png\" alt=\"\" class=\"wp-image-807\" srcset=\"https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-List-Example.png 397w, https:\/\/www.pyprifix.netlify.app\/wp-content\/uploads\/2020\/10\/Python-is-Operator-List-Example-300x189.png 300w\" sizes=\"(max-width: 397px) 100vw, 397px\" \/><\/figure><\/div>\n\n\n\n<h2 class=\"wp-block-heading\">Python is operator vs == operator<\/h2>\n\n\n\n<p>The equality operator (<code>==<\/code>) compares two variables for equality and returns <code>True<\/code> if they are equal. Otherwise, it returns <code>False<\/code>.<\/p>\n\n\n\n<p>The following example uses both <code>is<\/code> operator and <code>==<\/code> operator:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-7\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">a = <span class=\"hljs-number\">100<\/span>\nb = a\n\nis_identical = a is b\nis_equal = a == b\n\n<span class=\"hljs-keyword\">print<\/span>(is_identical)\n<span class=\"hljs-keyword\">print<\/span>(is_equal)<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-7\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-8\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">True<\/span>\n<span class=\"hljs-keyword\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-8\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Since <code>a<\/code> and <code>b<\/code> references the same object, they&#8217;re both identical and equal.<\/p>\n\n\n\n<p>In the following example, both lists have the same elements, so they&#8217;re equal. <\/p>\n\n\n\n<p>However, since they reference different list objects in the memory, they&#8217;re not identical:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-9\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">ranks = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\nrates = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\n\nis_identical = ranks is rates\nis_equal = ranks == rates\n\n<span class=\"hljs-keyword\">print<\/span>(is_identical)\n<span class=\"hljs-keyword\">print<\/span>(is_equal)\n<\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-9\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-10\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">False<\/span>\n<span class=\"hljs-keyword\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-10\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Python is not operator<\/h2>\n\n\n\n<p>To negate the <code>is<\/code> operator, you use the <code>not<\/code> operator. The <code>is not<\/code> operator returns <code>False<\/code> if two variables reference the same object. Otherwise, it returns <code>True<\/code>.<\/p>\n\n\n\n<p>The following example uses the <code>is not<\/code> operator to check if the two variables don&#8217;t reference the same list object:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-11\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\">ranks = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\nrates = &#91;<span class=\"hljs-number\">1<\/span>, <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-number\">3<\/span>]\n\nresult = ranks is not rates\n<span class=\"hljs-keyword\">print<\/span>(result)  <span class=\"hljs-comment\"># True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-11\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<p>Output:<\/p>\n\n\n<pre class=\"wp-block-code\" aria-describedby=\"shcb-language-12\" data-shcb-language-name=\"PHP\" data-shcb-language-slug=\"php\"><span><code class=\"hljs language-php\"><span class=\"hljs-keyword\">True<\/span><\/code><\/span><small class=\"shcb-language\" id=\"shcb-language-12\"><span class=\"shcb-language__label\">Code language:<\/span> <span class=\"shcb-language__name\">PHP<\/span> <span class=\"shcb-language__paren\">(<\/span><span class=\"shcb-language__slug\">php<\/span><span class=\"shcb-language__paren\">)<\/span><\/small><\/pre>\n\n\n<h2 class=\"wp-block-heading\">Summary<\/h2>\n\n\n\n<ul><li>Use the <code>is<\/code> operator to check if two variables reference the same object.<\/li><li>Use the <code>is<\/code> operator to check two variables for identity and <code>==<\/code> to check for two variables for equality.<\/li><li>Use the <code>not<\/code> operator to negate the result of the <code>is<\/code> operator.<\/li><\/ul>\n<div class=\"helpful-block-content\" data-title=\"\">\n\t<header>\n\t\t<div class=\"wth-question\">Did you find this tutorial helpful ?<\/div>\n\t\t<div class=\"wth-thumbs\">\n\t\t\t<button\n\t\t\t\tdata-post=\"801\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/advanced-python\/python-is-operator\/\"\n\t\t\t\tdata-post-title=\"Python is operator\"\n\t\t\t\tdata-response=\"1\"\n\t\t\t\tclass=\"wth-btn-rounded wth-yes-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t\tclass=\"feather feather-thumbs-up block w-full h-full\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> Yes <\/span>\n\t\t\t<\/button>\n\n\t\t\t<button\n\t\t\t\tdata-response=\"0\"\n\t\t\t\tdata-post=\"801\"\n\t\t\t\tdata-post-url=\"https:\/\/www.pyprifix.netlify.app\/advanced-python\/python-is-operator\/\"\n\t\t\t\tdata-post-title=\"Python is operator\"\n\t\t\t\tclass=\"wth-btn-rounded wth-no-btn\"\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http:\/\/www.w3.org\/2000\/svg\"\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstroke-width=\"2\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\tstroke-linejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"\n\t\t\t\t\t><\/path>\n\t\t\t\t<\/svg>\n\t\t\t\t<span class=\"sr-only\"> No <\/span>\n\t\t\t<\/button>\n\t\t<\/div>\n\t<\/header>\n\n\t<div class=\"wth-form hidden\">\n\t\t<div class=\"wth-form-wrapper\">\n\t\t\t<div class=\"wth-title\"><\/div>\n\t\t\t<textarea class=\"wth-message\"><\/textarea>\n\t\t\t<input type=\"button\" name=\"wth-submit\" class=\"wth-btn wth-btn-submit\" id=\"wth-submit\" \/>\n\t\t\t<input type=\"button\" class=\"wth-btn wth-btn-cancel\" value=\"Cancel\" \/>\n\t\t<\/div>\n\t<\/div>\n<\/div>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you&#8217;ll learn about the Python is operator and the differences between the is operator and equality (==) operators.<\/p>\n","protected":false},"author":1,"featured_media":0,"parent":757,"menu_order":4,"comment_status":"closed","ping_status":"closed","template":"","meta":{"footnotes":""},"_links":{"self":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/801"}],"collection":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/comments?post=801"}],"version-history":[{"count":5,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/801\/revisions"}],"predecessor-version":[{"id":2032,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/801\/revisions\/2032"}],"up":[{"embeddable":true,"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/pages\/757"}],"wp:attachment":[{"href":"https:\/\/www.pyprifix.netlify.app\/wp-json\/wp\/v2\/media?parent=801"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}